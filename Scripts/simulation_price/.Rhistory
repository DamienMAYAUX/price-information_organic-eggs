grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(df_fixed_effect3, by = "age")%>%
filter(age>30, age<75)%>%
mutate(diff_fixed_effect_life = diff(fixed_effect_life, lag = 1, differences = 1)),
aes(x = age)
)+
geom_point( aes(y = scale(fixed_effect_life), color = "Fixed effect"), size = 2 )+
geom_point( aes(y = scale(mean_gini), color = "Average Gini"), size = 2 )+
geom_point( aes(y = scale(mean_cv), color = "Average Variation Coeffcient"), size = 2 )+
geom_point( aes(y = scale(diff_fixed_effect_life), color = "Difference in fixed effect"), size = 2 )+
labs(x = "Age", y = "Scaled variables")+
scale_color_discrete(name = "Variable")
plot_pooled = ggplot(
df_age_SILC_selected%>%
select_at(
c(
"age",
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
pivot_longer(cols =
c(
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(df_fixed_effect3, by = "age")%>%
filter(age>30, age<75)%>%
mutate(diff_fixed_effect_life = replace_na(diff(fixed_effect_life, lag = 1, differences = 1), 0) ),
aes(x = age)
)+
geom_point( aes(y = scale(fixed_effect_life), color = "Fixed effect"), size = 2 )+
geom_point( aes(y = scale(mean_gini), color = "Average Gini"), size = 2 )+
geom_point( aes(y = scale(mean_cv), color = "Average Variation Coeffcient"), size = 2 )+
geom_point( aes(y = scale(diff_fixed_effect_life), color = "Difference in fixed effect"), size = 2 )+
labs(x = "Age", y = "Scaled variables")+
scale_color_discrete(name = "Variable")
plot_pooled = ggplot(
df_age_SILC_selected%>%
select_at(
c(
"age",
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
pivot_longer(cols =
c(
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(df_fixed_effect3, by = "age")%>%
filter(age>30, age<75)%>%
mutate(diff_fixed_effect_life = c(diff(fixed_effect_life, lag = 1, differences = 1),0) )%>% View(),
aes(x = age)
)+
geom_point( aes(y = scale(fixed_effect_life), color = "Fixed effect"), size = 2 )+
geom_point( aes(y = scale(mean_gini), color = "Average Gini"), size = 2 )+
geom_point( aes(y = scale(mean_cv), color = "Average Variation Coeffcient"), size = 2 )+
geom_point( aes(y = scale(diff_fixed_effect_life), color = "Difference in fixed effect"), size = 2 )+
labs(x = "Age", y = "Scaled variables")+
scale_color_discrete(name = "Variable")
plot_pooled = ggplot(
df_age_SILC_selected%>%
select_at(
c(
"age",
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
pivot_longer(cols =
c(
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(df_fixed_effect3, by = "age")%>%
filter(age>30, age<75)%>%
mutate(diff_fixed_effect_life = diff(fixed_effect_life, lag = 1, differences = 1) )%>% View(),
aes(x = age)
)+
geom_point( aes(y = scale(fixed_effect_life), color = "Fixed effect"), size = 2 )+
geom_point( aes(y = scale(mean_gini), color = "Average Gini"), size = 2 )+
geom_point( aes(y = scale(mean_cv), color = "Average Variation Coeffcient"), size = 2 )+
geom_point( aes(y = scale(diff_fixed_effect_life), color = "Difference in fixed effect"), size = 2 )+
labs(x = "Age", y = "Scaled variables")+
scale_color_discrete(name = "Variable")
plot_pooled = ggplot(
df_age_SILC_selected%>%
select_at(
c(
"age",
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
pivot_longer(cols =
c(
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(df_fixed_effect3, by = "age")%>%
filter(age>30, age<75)%>%
mutate(diff_fixed_effect_life = c(0,as.vector(diff(fixed_effect_life, lag = 1, differences = 1))) )%>% View(),
aes(x = age)
)+
geom_point( aes(y = scale(fixed_effect_life), color = "Fixed effect"), size = 2 )+
geom_point( aes(y = scale(mean_gini), color = "Average Gini"), size = 2 )+
geom_point( aes(y = scale(mean_cv), color = "Average Variation Coeffcient"), size = 2 )+
geom_point( aes(y = scale(diff_fixed_effect_life), color = "Difference in fixed effect"), size = 2 )+
labs(x = "Age", y = "Scaled variables")+
scale_color_discrete(name = "Variable")
df_age_SILC_selected%>%
select_at(
c(
"age",
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
pivot_longer(cols =
c(
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(df_fixed_effect3, by = "age")%>%
filter(age>30, age<75)%>%
mutate(diff_fixed_effect_life = c(0,as.vector(diff(fixed_effect_life, lag = 1, differences = 1))) )%>% View()
View(df_fixed_effect3)
df_fixed_effect2%>%
mutate(
diff_fixed_effect_life = diff(fixed_effect_life)
)
df_fixed_effect2%>%
mutate(
diff_fixed_effect_life = lag(fixed_effect_life)
)
df_fixed_effect2%>%
mutate(
diff_fixed_effect_life = lag(fixed_effect_life)
)%>% View()
df_fixed_effect2%>%
mutate(
diff_fixed_effect_life = fixed_effect_life - lag(fixed_effect_life)
)%>% View()
View(df_fixed_effect2)
df_fixed_effect3%>%
mutate(
diff_fixed_effect_life = fixed_effect_life - lag(fixed_effect_life)
)%>% View()
df_fixed_effect3%>%
mutate(
diff_fixed_effect_life = ifelse(age == 31, 0, fixed_effect_life - lag(fixed_effect_life))
)%>% View()
plot_pooled = ggplot(
df_age_SILC_selected%>%
select_at(
c(
"age",
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
pivot_longer(cols =
c(
grep("gini", names(df_age_SILC_selected), value = TRUE),
grep("cv", names(df_age_SILC_selected), value = TRUE)
)
)%>%
mutate(type = ifelse(grepl("gini", name), "gini", "cv"))%>%
select(-name)%>%
group_by(age, type)%>%
summarise(
median = median(value),
mean = mean(value)
)%>%
pivot_wider(names_from = type, values_from = c(median, mean))%>%
left_join(
df_fixed_effect3%>%
mutate(
diff_fixed_effect_life = ifelse(age == 31, 0, fixed_effect_life - lag(fixed_effect_life))
),
by = "age"
)%>%
filter(age>30, age<75),
aes(x = age)
)+
geom_point( aes(y = scale(fixed_effect_life), color = "Fixed effect"), size = 2 )+
geom_point( aes(y = scale(mean_gini), color = "Average Gini"), size = 2 )+
geom_point( aes(y = scale(mean_cv), color = "Average Variation Coeffcient"), size = 2 )+
geom_point( aes(y = scale(diff_fixed_effect_life), color = "Difference in fixed effect"), size = 2 )+
labs(x = "Age", y = "Scaled variables")+
scale_color_discrete(name = "Variable")
plot(plot_pooled)
library(
shiny)
library(tidyverse)
ggplot()+
stat_function(
aes(x = 0:30/30),
fun = pnorm
)
ggplot()+
stat_function(
aes(x = -3:3),
n = 99,
fun = dnorm,
args = list(sd=0.5)
)
ggplot(data.frame(x = rnorm(100)), aes(x)) +
geom_density() +
geom_function(fun = dnorm, colour = "red")
ggplot(
data.frame(x = 0:30/10), aes(x)
)+
stat_function(
n = 99,
fun = dnorm,
args = list(sd=0.5)
)
ggplot(
data.frame(x = 0:30/10), aes(x)
)+
stat_function(
n = 99,
fun = dlognorm,
args = list(sd=0.5)
)
ggplot(
data.frame(x = 0:30/10), aes(x)
)+
stat_function(
n = 99,
fun = dnorm,
args = list(sd=0.5)
)
ggplot(
data.frame(x = 0:30/10), aes(x)
)+
stat_function(
n = 99,
fun = dlnorm,
args = list(sd=0.5)
)
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Activism and Price : Simulator"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
radioButtons(
"total_pop_shape",
"What is the distribution of the WTP in the whole population ?",
c(
"Lognormal" = "lognormal",
#"Exponential",
"Truncated gaussian" = "truncated_gaussian"
)
),
sliderInput("total_pop_mean",
"Number of bins:",
min = 1,
max = 50,
value = 30),
radioButtons(
"activist_pop_shape",
"What is the distribution of the WTP in the activist population ?",
c(
"Lognormal" = "lognormal",
#"Exponential",
"Truncated gaussian" = "truncated_gaussian"
)
),
sliderInput("activist_pop_mean",
"Avergae WTP among the activists",
min = 0,
max = 0.3,
value = 0.1,
step = 0.01)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("activist_pop_plot")
)
)
)
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
shiny::runApp('E:/Mémoire/Code/Scripts/simulation_price')
library(truncnorm)
install.packages(truncnorm)
install.packages("truncnorm")
library("truncnorm")
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
shiny::runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp()
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
install.packages("mosaic")
library("mosaic")
library("mosaic")
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
f = function(x){
(x - input$cost) * activist_list$density(x) / activist_list$cumulative(x)
- input$conduct_parameter
}
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
int(5.6)
as.integer(5.6)
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp()
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp()
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp()
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
shiny::runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
runApp('E:/Mémoire/Code/Scripts/simulation_price')
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
deployApp()
setwd("E:/Mémoire/Code/Scripts/simulation_price")
runApp()
deployApp()
runApp()
runApp()
deployApp()
