summarise(centile_v = max(centile_nb))%>%
group_by(hhid)%>%
summarise(med_centile = median(centile_v))
df_mu = data.frame(mu_value = fit_lm_ref_price$coefficient)%>%
rownames_to_column("mu_name")
control_residuals1 = consumption%>%
mutate(v_value = fit_lm_ref_price$residuals)
control_residuals2 = control_residuals1%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(med_v = median(v_value))
control_residuals = consumption%>%
mutate(v_value = fit_lm_ref_price$residuals)
control_residuals_agg = control_residuals%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(med_v = median(v_value))
residuals_distrib_df = control_residuals%>%
group_by(label, calibre, marque, retailer)%>%
summarise_at(vars(v_value), lapply(1:100, function(x){~quantile(., probs = x/100)}))%>%
pivot_longer(cols = 5:104, names_to = "centile_nb", values_to = "centile_value")%>%
mutate(
centile_nb = case_when(
str_detect(centile_nb, "[0-9][0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9][0-9]"),
str_detect(centile_nb, "[0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9]"),
str_detect(centile_nb, "[0-9]") ~ str_extract(centile_nb, "[0-9]")
),
centile_nb = as.numeric(centile_nb)
)
control_residuals = consumption%>%
mutate(v_value = fit_lm_ref_price$residuals)
control_residuals = consumption%>%
mutate(v_value = fit_lm_ref_price$residuals)
control_residuals_agg = control_residuals%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(med_v = median(v_value))
control_residuals_distribution = control_residuals%>%
group_by(label, calibre, marque, retailer)%>%
summarise_at(vars(v_value), lapply(1:100, function(x){~quantile(., probs = x/100)}))%>%
pivot_longer(cols = 5:104, names_to = "centile_nb", values_to = "centile_value")%>%
mutate(
centile_nb = case_when(
str_detect(centile_nb, "[0-9][0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9][0-9]"),
str_detect(centile_nb, "[0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9]"),
str_detect(centile_nb, "[0-9]") ~ str_extract(centile_nb, "[0-9]")
),
centile_nb = as.numeric(centile_nb)
)
control_residuals_distribution = control_residuals%>%
group_by(label, calibre, marque, retailer)%>%
summarise_at(vars(v_value), lapply(1:100, function(x){~quantile(., probs = x/100)}))%>%
pivot_longer(cols = 5:104, names_to = "centile_nb", values_to = "centile_value")%>%
mutate(
centile_nb = case_when(
str_detect(centile_nb, "[0-9][0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9][0-9]"),
str_detect(centile_nb, "[0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9]"),
str_detect(centile_nb, "[0-9]") ~ str_extract(centile_nb, "[0-9]")
),
centile_nb = as.numeric(centile_nb)
)
control_residuals_med_centile_ind_df = residuals_distrib_df%>%
right_join(control_residuals_agg)%>%
filter(centile_value < med_v)%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(centile_v = max(centile_nb))%>%
group_by(hhid)%>%
summarise(med_centile_v = median(centile_v))
View(control_residuals_med_centile_ind_df)
View(control_residuals_med_centile_ind_df)
control_residuals_med_centile_hhid = residuals_distrib_df%>%
right_join(control_residuals_agg)%>%
filter(centile_value < med_v)%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(centile_v = max(centile_nb))%>%
group_by(hhid)%>%
summarise(med_centile_v = median(centile_v))
View(control_residuals_distribution)
saveRDS(control_residuals_distribution, "Inputs/control_residuals_distribution.rds")
saveRDS(control_residuals_med_centile_hhid, "Inputs/control_residuals_med_centile_hhid.rds")
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
###############################################################
#### THIS PATH SHOULD BE ADAPTED TO YOUR OWN CONFIGURATION ####
###############################################################
path_price-information_organic-eggs = "E:/Mémoire/Code/price-information_organic-eggs"
###############################################################
#### THIS PATH SHOULD BE ADAPTED TO YOUR OWN CONFIGURATION ####
###############################################################
path_price_information_organic_eggs = "E:/Mémoire/Code/price-information_organic-eggs"
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
consumption_without_nosale = readRDS("Inputs/shopping_trips_without_nosale.rds")
consumption_with_nosale = readRDS("Inputs/shopping_trips_with_nosale.rds")
hhid_with_enough_period_with_visit = consumption_without_nosale%>%
group_by(hhid, periode)%>%
summarise( nb_visits = n() )%>%
group_by(hhid)%>%
summarise( nb_periode_with_visit = n() )%>%
######### MAIN PARAMETER #############
filter(nb_periode_with_visit >= 6)%>%
######################################
.$hhid%>%
.[order(.)]
missing_hhid_periode =
# Create a table with all the households and all the periods
full_join(
data.frame(hhid = hhid_with_enough_period_with_visit, constant = 1),
data.frame(periode = as.factor(1:13), constant = 1)
)%>%
select(-constant)%>%
# Keep only couple household period for which there is no shopping trip
anti_join(
consumption_without_nosale%>% select(periode, hhid)%>% unique
)
consumption_completed_with_nosale =
# Build the dataframe of nosale to draw from
consumption_with_nosale%>%
filter(marque_simple == "nosale")%>%
semi_join(missing_hhid_periode)%>%
# Pick one nosale per hhid x periode
group_by(hhid, periode)%>%
mutate(
rank = 1:n(),
lottery = sample(1:n(),1)
)%>%
ungroup()%>%
filter(rank == lottery)%>%
select(-rank, -lottery)%>%
# Bind with the original table
bind_rows(
consumption_without_nosale%>%
filter(hhid %in% hhid_with_enough_period_with_visit)
)
consumption_completed_without_nosale = consumption_completed_with_nosale%>% filter(marque_simple != "nosale")
saveRDS(consumption_completed_with_nosale, "Inputs/shopping_trips_with_nosale_for_estimation.rds")
saveRDS(consumption_completed_without_nosale, "Inputs/shopping_trips_without_nosale_for_estimation.rds")
product_price = readRDS("Inputs/product_price.rds")
control_residuals_distribution = readRDS("Inputs/control_residuals_distribution.rds")
control_residuals_med_centile_hhid = readRDS("Inputs/control_residuals_med_centile_hhid.rds")
choice_situation_without_price_with_nosale_for_estimation =
readRDS("Inputs/choice_situations_without_price_with_nosale.rds")%>%
filter(X %in% (consumption_completed_with_nosale$X %>% unique()))
View(product_price)
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
nb_quantile = 10
consumption = readRDS("Inputs/shopping_trips_without_nosale.rds")
df_price1 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
mutate(nb_product_sold = n())%>%
ungroup()%>%
filter(nb_product_sold > 20)%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise_at(vars(unit_price), lapply(1:(nb_quantile-1)/nb_quantile, function(p){~quantile(.,p)}))%>%
pivot_longer(cols = 7:(nb_quantile+5), names_to = "order", values_to = "quantile")%>%
mutate(
order = as.numeric(substring(order, 11)),
quantile_shifted = c(0, quantile[1:(length(quantile)-1)]),
diff = quantile - quantile_shifted
)%>%
filter(diff == 0)%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(ref_price = min(quantile))
df_price2 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(decile_3 = quantile(unit_price, probs = 0.3))%>%
left_join(df_price1)%>%
mutate(
ref_price = ifelse(!is.na(ref_price), ref_price, decile_3)
)
df_price3 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(nb_product_sold = n())%>%
group_by(label, calibre, retailer, periode)%>%
mutate(max_nb_product_sold = max(nb_product_sold))%>%
ungroup()%>%
left_join(df_price2)%>%
group_by(label, calibre, marque, retailer, periode)%>%
mutate(
ref_price_vol_adjusted = max(ref_price * (max_nb_product_sold == nb_product_sold))
)%>%
select(
-nb_product_sold,
-max_nb_product_sold,
-decile_3
)
df_price4 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol)%>%
mutate(
avg_price = mean(unit_price)
)%>%
ungroup()%>%
left_join(df_price3)
saveRDS(df_price4,"Inputs/product_price.rds")
df_price_for_regression = consumption%>%
left_join(df_price4)%>%
pivot_wider(names_from = c("label", "calibre", "marque", "retailer"), values_from = "ref_price")%>%
select(unit_price, contains("calibre"))%>%
mutate_all(~replace_na(., 0))
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
#### STEP 1 : Keep only households with a large number of non-empty shopping trips
consumption_without_nosale = readRDS("Inputs/shopping_trips_without_nosale.rds")
consumption_with_nosale = readRDS("Inputs/shopping_trips_with_nosale.rds")
hhid_with_enough_period_with_visit = consumption_without_nosale%>%
group_by(hhid, periode)%>%
summarise( nb_visits = n() )%>%
group_by(hhid)%>%
summarise( nb_periode_with_visit = n() )%>%
######### MAIN PARAMETER #############
filter(nb_periode_with_visit >= 6)%>%
######################################
.$hhid%>%
.[order(.)]
#### STEP 2 : Complete the missing periods with nosale shopping trips
missing_hhid_periode =
# Create a table with all the households and all the periods
full_join(
data.frame(hhid = hhid_with_enough_period_with_visit, constant = 1),
data.frame(periode = as.factor(1:13), constant = 1)
)%>%
select(-constant)%>%
# Keep only couple household period for which there is no shopping trip
anti_join(
consumption_without_nosale%>% select(periode, hhid)%>% unique
)
consumption_completed_with_nosale =
# Build the dataframe of nosale to draw from
consumption_with_nosale%>%
filter(marque_simple == "nosale")%>%
semi_join(missing_hhid_periode)%>%
# Pick one nosale per hhid x periode
group_by(hhid, periode)%>%
mutate(
rank = 1:n(),
lottery = sample(1:n(),1)
)%>%
ungroup()%>%
filter(rank == lottery)%>%
select(-rank, -lottery)%>%
# Bind with the original table
bind_rows(
consumption_without_nosale%>%
filter(hhid %in% hhid_with_enough_period_with_visit)
)
consumption_completed_without_nosale = consumption_completed_with_nosale%>% filter(marque_simple != "nosale")
saveRDS(consumption_completed_with_nosale, "Inputs/shopping_trips_with_nosale_for_estimation.rds")
saveRDS(consumption_completed_without_nosale, "Inputs/shopping_trips_without_nosale_for_estimation.rds")
#### STEP 3 : INCORPORATE PRICES AND CONTROL FUNCTIONS
product_price = readRDS("Inputs/product_price.rds")
control_residuals_distribution = readRDS("Inputs/control_residuals_distribution.rds")
control_residuals_med_centile_hhid = readRDS("Inputs/control_residuals_med_centile_hhid.rds")
choice_situation_without_price_with_nosale_for_estimation =
readRDS("Inputs/choice_situations_without_price_with_nosale.rds")%>%
filter(X %in% (consumption_completed_with_nosale$X %>% unique()))
View(control_residuals_distribution)
View(control_residuals_med_centile_hhid)
View(control_residuals_med_centile_hhid)
View(control_residuals_distribution)
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
#### DEFINING A REFERENCE PRICE AT THE PRODUCT LEVEL
## FOR THE MOST CONSUMED PRODUCTS, TAKE THE FIRST VALUE THAN SPANS OVER TWO QUANTILES OF THE DATA
nb_quantile = 10
consumption = readRDS("Inputs/shopping_trips_without_nosale.rds")
df_price1 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
mutate(nb_product_sold = n())%>%
ungroup()%>%
filter(nb_product_sold > 20)%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise_at(vars(unit_price), lapply(1:(nb_quantile-1)/nb_quantile, function(p){~quantile(.,p)}))%>%
pivot_longer(cols = 7:(nb_quantile+5), names_to = "order", values_to = "quantile")%>%
mutate(
order = as.numeric(substring(order, 11)),
quantile_shifted = c(0, quantile[1:(length(quantile)-1)]),
diff = quantile - quantile_shifted
)%>%
filter(diff == 0)%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(ref_price = min(quantile))
## FOR THE OTHER PRODUCTS, USE THE 3RD DECILE
df_price2 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(decile_3 = quantile(unit_price, probs = 0.3))%>%
left_join(df_price1)%>%
mutate(
ref_price = ifelse(!is.na(ref_price), ref_price, decile_3)
)
## ALIGN REFERENCE PRICES FOR A GIVEN PRODUCT ACROSSS NUMBERS OF EGGS PER BOX
df_price3 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(nb_product_sold = n())%>%
group_by(label, calibre, retailer, periode)%>%
mutate(max_nb_product_sold = max(nb_product_sold))%>%
ungroup()%>%
left_join(df_price2)%>%
group_by(label, calibre, marque, retailer, periode)%>%
mutate(
ref_price_vol_adjusted = max(ref_price * (max_nb_product_sold == nb_product_sold))
)%>%
select(
-nb_product_sold,
-max_nb_product_sold,
-decile_3
)
## ADD SIMPLE PRICE AVERAGE AS AN ALTERNATIVE TO THE PREVIOUS PRICES
df_price4 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol)%>%
mutate(
avg_price = mean(unit_price)
)%>%
ungroup()%>%
left_join(df_price3)
saveRDS(df_price4,"Inputs/product_price.rds")
#### BUILDING A CONTROL FUNCTION AT THE INDIVIDUAL-PRODUCT LEVEL
## FIRST-STAGE EQUATION FOR THE INSTRUMENT REF PRICE (COEFF MU_JK) ####
df_price_for_regression = consumption%>%
left_join(df_price4)%>%
pivot_wider(names_from = c("label", "calibre", "marque", "retailer"), values_from = "ref_price")%>%
select(unit_price, contains("calibre"))%>%
mutate_all(~replace_na(., 0))
fit_lm_ref_price = lm(unit_price ~ . - 1, data = df_price_for_regression)
df_mu = data.frame(mu_value = fit_lm_ref_price$coefficient)%>%
rownames_to_column("mu_name")
control_residuals = consumption%>%
mutate(v_value = fit_lm_ref_price$residuals)
## DETERMINE TO WHAT EXTENT HOUSEHOLDS FACE EXCESSIVE PRICES
control_residuals_agg = control_residuals%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(med_v = median(v_value))
control_residuals_distribution = control_residuals%>%
group_by(label, calibre, marque, retailer)%>%
summarise_at(vars(v_value), lapply(1:100, function(x){~quantile(., probs = x/100)}))%>%
pivot_longer(cols = 5:104, names_to = "centile_nb", values_to = "centile_value")%>%
mutate(
centile_nb = case_when(
str_detect(centile_nb, "[0-9][0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9][0-9]"),
str_detect(centile_nb, "[0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9]"),
str_detect(centile_nb, "[0-9]") ~ str_extract(centile_nb, "[0-9]")
),
centile_nb = as.numeric(centile_nb)
)
control_residuals_med_centile_hhid = residuals_distrib_df%>%
right_join(control_residuals_agg)%>%
filter(centile_value < med_v)%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(centile_v = max(centile_nb))%>%
group_by(hhid)%>%
summarise(med_centile_v = as.integer(median(centile_v)))
saveRDS(control_residuals_distribution, "Inputs/control_residuals_distribution.rds")
saveRDS(control_residuals_med_centile_hhid, "Inputs/control_residuals_med_centile_hhid.rds")
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
nb_quantile = 10
consumption = readRDS("Inputs/shopping_trips_without_nosale.rds")
df_price1 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
mutate(nb_product_sold = n())%>%
ungroup()%>%
filter(nb_product_sold > 20)%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise_at(vars(unit_price), lapply(1:(nb_quantile-1)/nb_quantile, function(p){~quantile(.,p)}))%>%
pivot_longer(cols = 7:(nb_quantile+5), names_to = "order", values_to = "quantile")%>%
mutate(
order = as.numeric(substring(order, 11)),
quantile_shifted = c(0, quantile[1:(length(quantile)-1)]),
diff = quantile - quantile_shifted
)%>%
filter(diff == 0)%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(ref_price = min(quantile))
df_price2 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(decile_3 = quantile(unit_price, probs = 0.3))%>%
left_join(df_price1)%>%
mutate(
ref_price = ifelse(!is.na(ref_price), ref_price, decile_3)
)
df_price3 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol, periode)%>%
summarise(nb_product_sold = n())%>%
group_by(label, calibre, retailer, periode)%>%
mutate(max_nb_product_sold = max(nb_product_sold))%>%
ungroup()%>%
left_join(df_price2)%>%
group_by(label, calibre, marque, retailer, periode)%>%
mutate(
ref_price_vol_adjusted = max(ref_price * (max_nb_product_sold == nb_product_sold))
)%>%
select(
-nb_product_sold,
-max_nb_product_sold,
-decile_3
)
df_price4 = consumption%>%
group_by(label, calibre, marque, retailer, valqvol)%>%
mutate(
avg_price = mean(unit_price)
)%>%
ungroup()%>%
left_join(df_price3)
saveRDS(df_price4,"Inputs/product_price.rds")
df_price_for_regression = consumption%>%
left_join(df_price4)%>%
pivot_wider(names_from = c("label", "calibre", "marque", "retailer"), values_from = "ref_price")%>%
select(unit_price, contains("calibre"))%>%
mutate_all(~replace_na(., 0))
fit_lm_ref_price = lm(unit_price ~ . - 1, data = df_price_for_regression)
df_mu = data.frame(mu_value = fit_lm_ref_price$coefficient)%>%
rownames_to_column("mu_name")
control_residuals = consumption%>%
mutate(v_value = fit_lm_ref_price$residuals)
control_residuals_agg = control_residuals%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(med_v = median(v_value))
control_residuals_distribution = control_residuals%>%
group_by(label, calibre, marque, retailer)%>%
summarise_at(vars(v_value), lapply(1:100, function(x){~quantile(., probs = x/100)}))%>%
pivot_longer(cols = 5:104, names_to = "centile_nb", values_to = "centile_value")%>%
mutate(
centile_nb = case_when(
str_detect(centile_nb, "[0-9][0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9][0-9]"),
str_detect(centile_nb, "[0-9][0-9]") ~ str_extract(centile_nb, "[0-9][0-9]"),
str_detect(centile_nb, "[0-9]") ~ str_extract(centile_nb, "[0-9]")
),
centile_nb = as.numeric(centile_nb)
)
control_residuals_med_centile_hhid = residuals_distrib_df%>%
right_join(control_residuals_agg)%>%
filter(centile_value < med_v)%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(centile_v = max(centile_nb))%>%
group_by(hhid)%>%
summarise(med_centile_v = as.integer(median(centile_v)))
control_residuals_med_centile_hhid = control_residuals_distribution%>%
right_join(control_residuals_agg)%>%
filter(centile_value < med_v)%>%
group_by(label, calibre, marque, retailer, hhid)%>%
summarise(centile_v = max(centile_nb))%>%
group_by(hhid)%>%
summarise(med_centile_v = as.integer(median(centile_v)))
saveRDS(control_residuals_distribution, "Inputs/control_residuals_distribution.rds")
saveRDS(control_residuals_med_centile_hhid, "Inputs/control_residuals_med_centile_hhid.rds")
View(control_residuals_med_centile_hhid)
setwd("E:/Mémoire/Code/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
#### STEP 1 : Keep only households with a large number of non-empty shopping trips
consumption_without_nosale = readRDS("Inputs/shopping_trips_without_nosale.rds")
consumption_with_nosale = readRDS("Inputs/shopping_trips_with_nosale.rds")
hhid_with_enough_period_with_visit = consumption_without_nosale%>%
group_by(hhid, periode)%>%
summarise( nb_visits = n() )%>%
group_by(hhid)%>%
summarise( nb_periode_with_visit = n() )%>%
######### MAIN PARAMETER #############
filter(nb_periode_with_visit >= 6)%>%
######################################
.$hhid%>%
.[order(.)]
#### STEP 2 : Complete the missing periods with nosale shopping trips
missing_hhid_periode =
# Create a table with all the households and all the periods
full_join(
data.frame(hhid = hhid_with_enough_period_with_visit, constant = 1),
data.frame(periode = as.factor(1:13), constant = 1)
)%>%
select(-constant)%>%
# Keep only couple household period for which there is no shopping trip
anti_join(
consumption_without_nosale%>% select(periode, hhid)%>% unique
)
consumption_completed_with_nosale =
# Build the dataframe of nosale to draw from
consumption_with_nosale%>%
filter(marque_simple == "nosale")%>%
semi_join(missing_hhid_periode)%>%
# Pick one nosale per hhid x periode
group_by(hhid, periode)%>%
mutate(
rank = 1:n(),
lottery = sample(1:n(),1)
)%>%
ungroup()%>%
filter(rank == lottery)%>%
select(-rank, -lottery)%>%
# Bind with the original table
bind_rows(
consumption_without_nosale%>%
filter(hhid %in% hhid_with_enough_period_with_visit)
)
consumption_completed_without_nosale = consumption_completed_with_nosale%>% filter(marque_simple != "nosale")
saveRDS(consumption_completed_with_nosale, "Inputs/shopping_trips_with_nosale_for_estimation.rds")
saveRDS(consumption_completed_without_nosale, "Inputs/shopping_trips_without_nosale_for_estimation.rds")
#### STEP 3 : INCORPORATE PRICES AND CONTROL FUNCTIONS
product_price = readRDS("Inputs/product_price.rds")
control_residuals_distribution = readRDS("Inputs/control_residuals_distribution.rds")
control_residuals_med_centile_hhid = readRDS("Inputs/control_residuals_med_centile_hhid.rds")
choice_situation_without_price_with_nosale_for_estimation =
readRDS("Inputs/choice_situations_without_price_with_nosale.rds")%>%
filter(X %in% (consumption_completed_with_nosale$X %>% unique()))
choice_situation_with_nosale_for_estimation =
choice_situation_without_price_with_nosale_for_estimation%>%
# Obtain household x retailer x product control function value
left_join(control_residuals_med_centile_hhid)%>%
left_join(control_residuals_distribution)%>%
# Obtain retailer x product average price
left_join(product_price)%>%
mutate(
control = ifelse(choice, price - agg_price, 0),
price = ifelse(marque_simple == "nosale", 0, agg_price),
control = ifelse(marque_simple == "nosale", 0, control)
)%>%
select(-agg_price)
