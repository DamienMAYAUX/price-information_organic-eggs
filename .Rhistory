"conditionals",
"package_loader",
"apollo_control",
"apollo_fixed",
"apollo_beta"
)
tic("Broadcasting global variables in the cluster")
clusterExport(cl = cluster, varlist = required_variable_list)
toc()
tic("Compute equilibrium price range in parallel")
retailer_price_list_range = clusterApply(
cl = cluster,
x = lapply(
X = boycott_price_range%>% as.list(),
FUN = function(x){rep(x, length(retailer_price_list_test))}
),
fun = compute_equilibrium_price_boycott,
initial_retailer_price = retailer_price_list_test,
df_hhid_conditional = df_hhid_conditional,
hhid_activist_list = hhid_activist_list,
boycott_type = boycott_type,
subsample = subsample,
verbose = verbose,
precision = precision,
initial_precision = initial_precision
)
toc()
stopCluster(cluster)
retailer_price_list_range
}
nb_hhid = nrow(conditionals)
hhid_activist_list_high_middle_5percent = database%>%
select(hhid, clas_high_middle)%>%
filter(clas_high_middle == 1)%>%
unique()%>%
.$hhid%>%
sample(round(5*nb_hhid/100))
hhid_activist_list_high_5percent = database%>%
select(hhid, clas_high)%>%
filter(clas_high == 1)%>%
unique()%>%
.$hhid%>%
sample(round(5*nb_hhid/100))
hhid_activist_list_alpha_5percent = conditionals%>%
mutate(percentile = quantile(conditional, probs = c(0.05)))%>%
filter(conditional < percentile)%>% .$hhid
hhid_activist_list_alpha_1percent = conditionals%>%
mutate(percentile = quantile(conditional, probs = c(0.01)))%>%
filter(conditional < percentile)%>% .$hhid
hhid_activist_list_alpha_05percent = conditionals%>%
mutate(percentile = quantile(conditional, probs = c(0.005)))%>%
filter(conditional < percentile)%>% .$hhid
# HARD, ALPHA 1%
retailer_price_list_range_hard_alpha_1percent_0_70_02 = compute_equilibrium_price_boycott(
initial_retailer_price = retailer_price_list_test,
df_hhid_conditional = conditionals,
activist_price_list = rep(0.35, 122),
hhid_activist_list = hhid_activist_list_alpha_1percent,
boycott_type = "hard",
subsample = NULL,
verbose = 5,
precision = 0.001,
initial_precision = 0.005
)
# HARD, ALPHA 1%
retailer_price_list_range_hard_alpha_1percent_0_70_02 = compute_equilibrium_price_boycott(
initial_retailer_price = retailer_price_list_test,
df_hhid_conditional = conditionals,
activist_price_list = rep(0.05, 122),
hhid_activist_list = hhid_activist_list_alpha_1percent,
boycott_type = "hard",
subsample = NULL,
verbose = 5,
precision = 0.001,
initial_precision = 0.005
)
# HARD, ALPHA 1%
retailer_price_list_range_hard_alpha_1percent_0_70_02 = compute_equilibrium_price_boycott(
initial_retailer_price = retailer_price_list_test,
df_hhid_conditional = conditionals,
activist_price_list = rep(0.05, 122),
hhid_activist_list = hhid_activist_list_alpha_1percent,
boycott_type = "hard",
subsample = NULL,
verbose = 1,
precision = 0.001,
initial_precision = 0.005
)
current_retailer = "43_1"
df_produt_current_retailer = df_product%>%
rowid_to_column("rank")%>%
filter(retailer == current_retailer)
retailer_product_rank = df_produt_current_retailer$rank
retailer_organic_product_rank = df_produt_current_retailer%>%
filter(label == "labelbio")%>%
.$rank
retailer_organic_product_at_boycott_price_rank = df_produt_current_retailer%>%
filter(label == "labelbio")%>%
.$rank
retailer_product_not_at_boycott_price_rank = df_produt_current_retailer%>%
.$rank%>%
.[!(. %in% retailer_organic_product_at_boycott_price_rank)]
activist_price_list = activist_price_list_test
initial_retailer_price = retailer_price_list_test
precision = 0.0001
new_retailer_price = initial_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank] - 0.000001
previous_price_difference = 1
min_weight = 1
weight = 1
price_difference = 1
iteration_counter = 0
tic("Computing the best price took")
while (price_difference>precision & weight > 0.0001){
iteration_counter = iteration_counter+1
current_retailer_price = new_retailer_price
previous_price_difference = price_difference
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, new_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample
)
relevant_demand = demand_and_matrix$demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
omega =
demand_and_matrix$matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
as.matrix()
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
(cost_list[retailer_product_not_at_boycott_price_rank] -
solve(
omega[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank],
relevant_demand +
omega[retailer_product_not_at_boycott_price_rank,retailer_organic_product_at_boycott_price_rank] %*%
as.matrix(current_retailer_price[retailer_organic_product_at_boycott_price_rank] - cost_list[retailer_organic_product_at_boycott_price_rank])
)%>%
as.vector()
)/(1-0.055)
price_difference = max(abs(
new_retailer_price[retailer_product_not_at_boycott_price_rank] -
current_retailer_price[retailer_product_not_at_boycott_price_rank]
))
# weight = min(0.5 * previous_price_difference/price_difference, 1)
# weight = min(previous_price_difference/price_difference, 1) * weight
# weight = min(previous_price_difference/price_difference, 1)
if (price_difference/previous_price_difference > 1){
weight = min(previous_price_difference/price_difference, weight)
} else if (price_difference/previous_price_difference > 0.8){
weight = weight * 0.9
}
min_weight = min(weight, min_weight)
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
current_retailer_price[retailer_product_not_at_boycott_price_rank] * (1-weight) +
new_retailer_price[retailer_product_not_at_boycott_price_rank] * weight
if (verbose > 3){
cat(paste("Iteration", iteration_counter, "with step size", weight, "\n"))
if (verbose > 4){
print(price_difference)
print(new_retailer_price[retailer_product_not_at_boycott_price_rank])
}
}
}
# retailer_organic_product_rank = df_produt_current_retailer%>%
#   filter(label == "labelbio")%>%
#   .$rank
# retailer_organic_product_at_boycott_price_rank = df_produt_current_retailer%>%
#   filter(label == "labelbio")%>%
#   .$rank
# retailer_product_not_at_boycott_price_rank = df_produt_current_retailer%>%
#   .$rank%>%
#   .[!(. %in% retailer_organic_product_at_boycott_price_rank)]
# activist_price_list = activist_price_list_test
hhid_activist_list = hhid_activist_list_alpha_1percent
new_retailer_price = initial_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank] - 0.000001
previous_price_difference = 1
min_weight = 1
weight = 1
price_difference = 1
iteration_counter = 0
tic("Computing the best price took")
while (price_difference>precision & weight > 0.0001){
iteration_counter = iteration_counter+1
current_retailer_price = new_retailer_price
previous_price_difference = price_difference
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, new_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample
)
relevant_demand = demand_and_matrix$demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
omega =
demand_and_matrix$matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
as.matrix()
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
(cost_list[retailer_product_not_at_boycott_price_rank] -
solve(
omega[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank],
relevant_demand +
omega[retailer_product_not_at_boycott_price_rank,retailer_organic_product_at_boycott_price_rank] %*%
as.matrix(current_retailer_price[retailer_organic_product_at_boycott_price_rank] - cost_list[retailer_organic_product_at_boycott_price_rank])
)%>%
as.vector()
)/(1-0.055)
price_difference = max(abs(
new_retailer_price[retailer_product_not_at_boycott_price_rank] -
current_retailer_price[retailer_product_not_at_boycott_price_rank]
))
# weight = min(0.5 * previous_price_difference/price_difference, 1)
# weight = min(previous_price_difference/price_difference, 1) * weight
# weight = min(previous_price_difference/price_difference, 1)
if (price_difference/previous_price_difference > 1){
weight = min(previous_price_difference/price_difference, weight)
} else if (price_difference/previous_price_difference > 0.8){
weight = weight * 0.9
}
min_weight = min(weight, min_weight)
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
current_retailer_price[retailer_product_not_at_boycott_price_rank] * (1-weight) +
new_retailer_price[retailer_product_not_at_boycott_price_rank] * weight
if (verbose > 3){
cat(paste("Iteration", iteration_counter, "with step size", weight, "\n"))
if (verbose > 4){
print(price_difference)
print(new_retailer_price[retailer_product_not_at_boycott_price_rank])
}
}
}
#   .$rank
# retailer_organic_product_at_boycott_price_rank = df_produt_current_retailer%>%
#   filter(label == "labelbio")%>%
#   .$rank
# retailer_product_not_at_boycott_price_rank = df_produt_current_retailer%>%
#   .$rank%>%
#   .[!(. %in% retailer_organic_product_at_boycott_price_rank)]
# activist_price_list = activist_price_list_test
# hhid_activist_list = hhid_activist_list_alpha_1percent
# initial_retailer_price = retailer_price_list_test
boycott_type = "hard"
new_retailer_price = initial_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank] - 0.000001
previous_price_difference = 1
min_weight = 1
weight = 1
price_difference = 1
iteration_counter = 0
tic("Computing the best price took")
while (price_difference>precision & weight > 0.0001){
iteration_counter = iteration_counter+1
current_retailer_price = new_retailer_price
previous_price_difference = price_difference
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, new_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample
)
relevant_demand = demand_and_matrix$demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
omega =
demand_and_matrix$matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
as.matrix()
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
(cost_list[retailer_product_not_at_boycott_price_rank] -
solve(
omega[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank],
relevant_demand +
omega[retailer_product_not_at_boycott_price_rank,retailer_organic_product_at_boycott_price_rank] %*%
as.matrix(current_retailer_price[retailer_organic_product_at_boycott_price_rank] - cost_list[retailer_organic_product_at_boycott_price_rank])
)%>%
as.vector()
)/(1-0.055)
price_difference = max(abs(
new_retailer_price[retailer_product_not_at_boycott_price_rank] -
current_retailer_price[retailer_product_not_at_boycott_price_rank]
))
# weight = min(0.5 * previous_price_difference/price_difference, 1)
# weight = min(previous_price_difference/price_difference, 1) * weight
# weight = min(previous_price_difference/price_difference, 1)
if (price_difference/previous_price_difference > 1){
weight = min(previous_price_difference/price_difference, weight)
} else if (price_difference/previous_price_difference > 0.8){
weight = weight * 0.9
}
min_weight = min(weight, min_weight)
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
current_retailer_price[retailer_product_not_at_boycott_price_rank] * (1-weight) +
new_retailer_price[retailer_product_not_at_boycott_price_rank] * weight
if (verbose > 3){
cat(paste("Iteration", iteration_counter, "with step size", weight, "\n"))
if (verbose > 4){
print(price_difference)
print(new_retailer_price[retailer_product_not_at_boycott_price_rank])
}
}
}
#   .$rank
# retailer_organic_product_at_boycott_price_rank = df_produt_current_retailer%>%
#   filter(label == "labelbio")%>%
#   .$rank
# retailer_product_not_at_boycott_price_rank = df_produt_current_retailer%>%
#   .$rank%>%
#   .[!(. %in% retailer_organic_product_at_boycott_price_rank)]
# activist_price_list = activist_price_list_test
# hhid_activist_list = hhid_activist_list_alpha_1percent
# initial_retailer_price = retailer_price_list_test
boycott_type = "hard"
subsample = NULL
new_retailer_price = initial_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank] - 0.000001
previous_price_difference = 1
min_weight = 1
weight = 1
price_difference = 1
iteration_counter = 0
tic("Computing the best price took")
while (price_difference>precision & weight > 0.0001){
iteration_counter = iteration_counter+1
current_retailer_price = new_retailer_price
previous_price_difference = price_difference
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, new_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample
)
relevant_demand = demand_and_matrix$demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
omega =
demand_and_matrix$matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
as.matrix()
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
(cost_list[retailer_product_not_at_boycott_price_rank] -
solve(
omega[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank],
relevant_demand +
omega[retailer_product_not_at_boycott_price_rank,retailer_organic_product_at_boycott_price_rank] %*%
as.matrix(current_retailer_price[retailer_organic_product_at_boycott_price_rank] - cost_list[retailer_organic_product_at_boycott_price_rank])
)%>%
as.vector()
)/(1-0.055)
price_difference = max(abs(
new_retailer_price[retailer_product_not_at_boycott_price_rank] -
current_retailer_price[retailer_product_not_at_boycott_price_rank]
))
# weight = min(0.5 * previous_price_difference/price_difference, 1)
# weight = min(previous_price_difference/price_difference, 1) * weight
# weight = min(previous_price_difference/price_difference, 1)
if (price_difference/previous_price_difference > 1){
weight = min(previous_price_difference/price_difference, weight)
} else if (price_difference/previous_price_difference > 0.8){
weight = weight * 0.9
}
min_weight = min(weight, min_weight)
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
current_retailer_price[retailer_product_not_at_boycott_price_rank] * (1-weight) +
new_retailer_price[retailer_product_not_at_boycott_price_rank] * weight
if (verbose > 3){
cat(paste("Iteration", iteration_counter, "with step size", weight, "\n"))
if (verbose > 4){
print(price_difference)
print(new_retailer_price[retailer_product_not_at_boycott_price_rank])
}
}
}
verbose = 5
new_retailer_price = initial_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank] - 0.000001
previous_price_difference = 1
min_weight = 1
weight = 1
price_difference = 1
iteration_counter = 0
tic("Computing the best price took")
while (price_difference>precision & weight > 0.0001){
iteration_counter = iteration_counter+1
current_retailer_price = new_retailer_price
previous_price_difference = price_difference
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, new_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample
)
relevant_demand = demand_and_matrix$demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
omega =
demand_and_matrix$matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
as.matrix()
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
(cost_list[retailer_product_not_at_boycott_price_rank] -
solve(
omega[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank],
relevant_demand +
omega[retailer_product_not_at_boycott_price_rank,retailer_organic_product_at_boycott_price_rank] %*%
as.matrix(current_retailer_price[retailer_organic_product_at_boycott_price_rank] - cost_list[retailer_organic_product_at_boycott_price_rank])
)%>%
as.vector()
)/(1-0.055)
price_difference = max(abs(
new_retailer_price[retailer_product_not_at_boycott_price_rank] -
current_retailer_price[retailer_product_not_at_boycott_price_rank]
))
# weight = min(0.5 * previous_price_difference/price_difference, 1)
# weight = min(previous_price_difference/price_difference, 1) * weight
# weight = min(previous_price_difference/price_difference, 1)
if (price_difference/previous_price_difference > 1){
weight = min(previous_price_difference/price_difference, weight)
} else if (price_difference/previous_price_difference > 0.8){
weight = weight * 0.9
}
min_weight = min(weight, min_weight)
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
current_retailer_price[retailer_product_not_at_boycott_price_rank] * (1-weight) +
new_retailer_price[retailer_product_not_at_boycott_price_rank] * weight
if (verbose > 3){
cat(paste("Iteration", iteration_counter, "with step size", weight, "\n"))
if (verbose > 4){
print(price_difference)
print(new_retailer_price[retailer_product_not_at_boycott_price_rank])
}
}
}
if (Sys.info()["sysname"] == "Windows"){
dir = "U:/price-information_organic-eggs"
} else {
dir = "~/U/price-information_organic-eggs"
}
setwd(dir)
source("Scripts/0_Packages_Libraries.R")
model = apollo_loadModel("Inputs/DemandModel_20220127/nosale_lnorm_with_control_perfect_competition")
model = apollo_loadModel("DemandModel_20220127/nosale_lnorm_with_control_perfect_competition")
model = apollo_loadModel("DemandModel_20220131/nosale_lnorm_with_control_perfect_competition")
model$estimate
model$varcov%>% View()
df_model_coefficients =
left_join(
model$estimate%>% as.data.frame()%>% rownames_to_column("coefficient"),
model$varcov%>% diag()%>% sqrt() %>% as.data.frame()%>% rownames_to_column("coefficient"),
by = ("coefficient")
)%>%
rename(
estimate = ..x,
standard_deviation = ..y
)%>%
mutate(
relative_error = 100* 1.96*standard_deviation/abs(estimate)
)
df_model_coefficient_characteristics = df_model_coefficients%>%
filter(str_detect(coefficient, "b_"))%>%
filter()
df_model_coefficient_demographics = df_model_coefficients%>%
filter(str_detect(coefficient, "c_") | str_detect(coefficient, "lnorm"))%>%
mutate(
estimate = ifelse(
is.na(standard_deviation),
"Référence",
paste0(
as.character(format(round(estimate, 3), nsmall=3)),
"   +/- ",
as.character(format(round(relative_error),3)),
"%"
)
),
standard_deviation = ifelse(
is.na(standard_deviation),
"Référence",
as.character(format(round(standard_deviation, 3), nsmall=3))
),
coefficient = case_when(
coefficient == "mu_lnorm" ~ "Log-moyenne de la sensibilité au prix pour un ménage de référence",
coefficient == "sigma_lnorm" ~ "Log-variance de la sensibilité au prix",
coefficient == "c_high" ~ "Haut niveau de revenu",
coefficient == "c_high_middle" ~ "Assez haut niveau de revenu",
coefficient == "c_low_middle" ~ "Assez faible niveau de revenu",
coefficient == "c_low" ~ "Faible niveau de revenu",
coefficient == "c_couple_35" ~ "En couple, moins de 35 ans, sans enfant",
coefficient == "c_couple_65" ~ "En couple, plus de 65 ans, sans enfant",
coefficient == "c_couple_3565" ~ "En couple, entre 35 et 65 ans, sans enfant",
coefficient == "c_family_05" ~ "Famille, l'ainé-e a moins de 5 ans",
coefficient == "c_family_611" ~ "Famille, l'ainé-e a entre 6 et 11 ans",
coefficient == "c_family_1217" ~ "Famille, l'ainé-e a entre 12 et 17 ans",
coefficient == "c_family_1824" ~ "Famille, l'ainé-e a entre 18 et 24 ans",
coefficient == "c_single_35" ~ "Célibataire, moins de 35 ans, sans enfant",
coefficient == "c_single_65" ~ "Célibataire, plus de 65 ans, sans enfant",
coefficient == "c_single_3565" ~ "Célibataire, entre 35 et 65 ans, sans enfant",
)
)%>%
select(-relative_error, -standard_deviation)%>%
rename(
Variable = coefficient,
`Coefficient estimé` = estimate
)
df_model_coefficient_demographics_kable = df_model_coefficient_demographics%>%
kbl()%>%
kable_paper("striped", full_width = F)%>%
pack_rows("Niveau de revenu", 3,6)%>%
pack_rows("Cycle de vie", 7,16)%>%
footnote(general = "Les intervalles de confiance sont donnés avec 95% de certitude", footnote_as_chunk = T)
View(df_model_coefficient_characteristics)
