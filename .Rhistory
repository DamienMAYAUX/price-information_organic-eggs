fabricant,
marque,
circuit,
centraleachat,
periode,
valqvol
),
as.factor
)%>%
mutate(
dateachat = as.Date(dateachat, format = "%d/%m/%Y")
)%>%
# The rows for which the week is missing correspond to periods during which no egg was bought
filter(!is.na(semaine))
## STEP 2 : FILTER RELEVANT CHARACTERISTICS, DROP_NA
consumption_cleaner2 = consumption_cleaner1%>%
filter(
is.na(sdachat) | valqvol %in% c(1, 4, 6, 10, 12, 20, 30),
is.na(sdachat) | calibre != "calibreS",
is.na(sdachat) | calibre != "calibremissing",
is.na(sdachat) | calibre != "nocalibre",
is.na(sdachat) | label != "labelmissing",
is.na(sdachat) | label != "nglabel",
is.na(sdachat) | sdachat < 100,
is.na(sdachat) | centraleachat %in% c(1,2,3,4,8,10,18,21,30),
is.na(sdachat) | circuit %in% c(7,41,42,43)
)%>%
drop_na()
## STEP 3 : DEFINE RELEVANT CHARACTERISTICS, FILTER ABSURD PRICES
consumption_cleaner3 = consumption_cleaner2%>%
mutate(
unit_price = sdachat / ( qaachat * as.numeric(as.character(valqvol))),
retailer = paste(circuit, centraleachat, sep = "_")
)%>%
rownames_to_column("X")%>%
select(
X, # Defines choice situation
hhid, # Defines the household
marque, calibre, valqvol, label, # Defines the product,
unit_price, # Defines the price
retailer, # Defines the retailer
periode,
dateachat
)%>%
filter(unit_price < 1)
## STEP 4 : DETERMINE RELEVANT RETAILERS, DROP OTHER SALES
retailer_df = consumption_cleaner3%>%
group_by(retailer)%>%
summarise(
total_sales = n(),
)%>%
arrange(-total_sales)%>%
mutate(
share = total_sales/ sum(total_sales),
cumul = cumsum(share)
)
retailer_list = retailer_df%>%
filter(total_sales>1000)%>%
.$retailer
consumption_cleaner4 = consumption_cleaner3%>%
filter(retailer %in% retailer_list)
# From now on, the number of shopping trips with a sales shall not change
#### CHOICE SETS AND CHOICE SITUATIONS
## STEP 5 : DEFINING BRAND CATEGORIES
## Je dÃ©finis pour chaque label la liste des marques les plus importantes
# j'essaye d'avoir les diffÃ©rents labels pour une mÃªme marque
marque_bio_df = consumption_cleaner4%>%
filter(label == "labelbio")%>%
group_by(marque)%>%
summarise(
total_sales = n()
)%>%
arrange(-total_sales)%>%
mutate(
share = total_sales/ sum(total_sales),
cumul = cumsum(share)
)
marque_bio_list = marque_bio_df%>%
filter(total_sales>95)%>%
.$marque%>%
as.character()%>%
c(.,
#"LUSTUCRU",
"NETTO",
#"BABY COQUE",
"OEUF DE NOS VILLAGES",
"REFLETS DE FRANCE"
)%>%
.[.!= "PETITJOUR"]%>%
.[.!= "DUCLAIR"]
marque_pleinair_df = consumption_cleaner4%>%
filter(label == "labelpleinair")%>%
group_by(marque)%>%
summarise(
total_sales = n()
)%>%
arrange(-total_sales)%>%
mutate(
share = total_sales/ sum(total_sales),
cumul = cumsum(share)
)
marque_pleinair_list = marque_pleinair_df%>%
filter(total_sales>180)%>%
.$marque%>%
as.character()%>%
c(.,
#"LUSTUCRU",
"NETTO", "MONOPRIX", "MONOPRIX GOURMET")%>%
.[.!= "PETITJOUR"]%>%
.[.!= "DUCLAIR"]
marque_nolabel_df = consumption_cleaner4%>%
filter(label == "nolabel")%>%
group_by(marque)%>%
summarise(
total_sales = n()
)%>%
arrange(-total_sales)%>%
mutate(
share = total_sales/ sum(total_sales),
cumul = cumsum(share)
)
marque_nolabel_list = marque_nolabel_df%>%
filter(total_sales>341)%>%
.$marque%>%
as.character()%>%
c(.,
#"LUSTUCRU LES SELECTIONS",
#"BABY COQUE"
"MONOPRIX",
)%>%
.[.!= "PETITJOUR"]%>%
.[.!= "DUCLAIR"]
marque_nolabel_list = marque_nolabel_df%>%
filter(total_sales>341)%>%
.$marque%>%
as.character()%>%
c(.,
#"LUSTUCRU LES SELECTIONS",
#"BABY COQUE"
"MONOPRIX"
)%>%
.[.!= "PETITJOUR"]%>%
.[.!= "DUCLAIR"]
# A partir des marques sÃ©lectionnÃ©es ci-dessus, je construis ma liste des marques
marque_list = c(
marque_bio_list,
marque_pleinair_list,
marque_nolabel_list
)%>%
unique()
# A partir des marques sÃ©lectionnÃ©es ci-dessus, je construis ma liste des marques
mar = c(
marque_bio_list,
marque_pleinair_list,
marque_nolabel_list
)%>%
unique()
marques_mdd_low = c(
"AUCHAN.PP POUCE",
"BIEN VU",
"CARREFOUR.DISCOUNT",
"ECO+",
"LIDL",
"MARQUES ALDI",
"NETTO",
"TOP BUDGET"
)
marques_mdd_medium = c(
"AUCHAN",
"CARREFOUR",
"CASINO",
"MONOPRIX",
"U"
)
marques_mdd_high = c(
"MONOPRIX GOURMET",
"BIO VILLAGE",
"MOISSON",
"OEUFS DE NOS REGIONS LES",
"REFLETS DE FRANCE",
"NOS REGIONS ONT DU TALENT"
)
marques_indep = c(
#"BABY COQUE",
#"COCORETTE",
#"OEUF DE NOS VILLAGES",
"GAULOIS LE",
"LOUE",
#"BIO",
#"LUSTUCRU",
"MATINES"
)
df_marques = data.frame(marque = marque_list, marque_simple = NA)%>%
mutate(
marque_simple = case_when(
marque %in% marques_indep ~ "indep",
marque %in% marques_mdd_low ~ "low",
marque %in% marques_mdd_medium ~ "medium",
marque %in% marques_mdd_high ~ "high",
TRUE ~ "other"
)
)
View(df_marques)
View(df_marques)
# Tous les produits qui ne sont pas dans les marques sÃ©lectionnÃ©es finissent dans "Marque non trouvÃ©e"
# Je regroupe entre elles certaines marque quand la diffÃ©rence correspond juste Ã  un label
# Je regroupe entre elles les MDD selon le niveau de qualitÃ© associÃ©
consumption_cleaner5  = consumption_cleaner4%>%
filter(marque == "nosale" | (marque_simple != "other") )%>%
mutate_at(vars(marque), as.character)%>%
mutate(
marque = ifelse(marque %in% marque_list, marque, "Marque Non Trouvee"),
marque = ifelse(marque == "AUCHAN.BIO", "AUCHAN", marque),
marque = ifelse(marque == "U.BIO U", "U", marque),
marque = ifelse(marque == "MONOPRIX BIO", "MONOPRIX", marque),
marque = ifelse(marque == "CARREFOUR.BIO", "CARREFOUR", marque),
marque = ifelse(marque == "CASINO.BIO", "CASINO", marque)
)%>%
left_join(df_marques)%>%
mutate_at(vars(retailer, marque_simple, marque), as.factor)
View(consumption_cleaner4)
# Tous les produits qui ne sont pas dans les marques sÃ©lectionnÃ©es finissent dans "Marque non trouvÃ©e"
# Je regroupe entre elles certaines marque quand la diffÃ©rence correspond juste Ã  un label
# Je regroupe entre elles les MDD selon le niveau de qualitÃ© associÃ©
consumption_cleaner5  = consumption_cleaner4%>%
mutate_at(vars(marque), as.character)%>%
mutate(
marque = ifelse(marque %in% marque_list, marque, "Marque Non Trouvee"),
marque = ifelse(marque == "AUCHAN.BIO", "AUCHAN", marque),
marque = ifelse(marque == "U.BIO U", "U", marque),
marque = ifelse(marque == "MONOPRIX BIO", "MONOPRIX", marque),
marque = ifelse(marque == "CARREFOUR.BIO", "CARREFOUR", marque),
marque = ifelse(marque == "CASINO.BIO", "CASINO", marque)
)%>%
left_join(df_marques)%>%
filter(marque == "nosale" | (marque_simple != "other") )%>%
mutate_at(vars(retailer, marque_simple, marque), as.factor)
hhid_list = consumption_cleaner5$hhid%>% unique()
shopping_trips_cleaner = shopping_trips%>%
mutate(retailer = paste(circuit, centraleachat, sep = "_"))%>%
filter(
hhid %in% hhid_list,
retailer %in% retailer_list
)%>%
select(-codeshopachat, -shoppingtrip, -periode)
X_max = max(as.numeric(consumption_cleaner5$X))
nb_nosale = nrow(shopping_trips_cleaner)
consumption_cleaner6 =
bind_rows(
consumption_cleaner5%>%
mutate_at(vars(valqvol, periode), ~as.numeric(as.character(.))),
shopping_trips_cleaner2 = shopping_trips_cleaner%>%
mutate(
X = as.character((X_max+1):(X_max+nb_nosale)),
periode = 1 + (semaine - 1) %/% 4
# The first week of the year 2012 starts on Jan 2nd
# THe first week in period 1 is the one before
)%>%
select(X, hhid, periode, retailer)%>%
mutate(
marque = "nosale",
marque_simple = "nosale",
calibre = "nosale",
label = "nosale",
valqvol = 0,
unit_price = 0
)
)%>%
arrange(hhid, periode)%>%
mutate_at(
vars(retailer, periode, marque, marque_simple, label, calibre, valqvol),
as.factor
)%>%
mutate_at(
vars(X, hhid), as.integer
)
## STEP 6 BIS : RETAILER SET DEFINITION
df_retailer_set = consumption_cleaner6%>%
count(hhid, retailer, periode)%>%
select(-n)
saveRDS(df_retailer_set, "Inputs/df_hhid_retailer_set_20211129.rds")
# df_retailer_set%>%
#   count(retailer, periode)
#
# df_retailer_set%>%
#   count(hhid, periode)%>%
#   .$n%>%
#   as.factor()%>%
#   summary()
## STEP 7 : CHOICE SET DEFINITION
df_choice_set = consumption_cleaner6%>%
select(retailer, periode, marque, marque_simple, label, calibre, valqvol)%>%
unique()
# Check the size of the choice set for each retailer and period
# df_choice_sets%>% count(retailer, periode)%>% View()
# Check that that nosale is in the choice set for each period and retailer
# df_choice_sets%>%
#   filter(marque_simple == "nosale")%>%
#   count(retailer)%>% View()
## STEP 8 : CHOICE SITUATION DEFINITION
df_choice_situation = consumption_cleaner6%>%
rename(
marque_chosen = marque,
label_chosen = label,
calibre_chosen = calibre,
valqvol_chosen = valqvol,
marque_simple_chosen = marque_simple,
retailer_chosen = retailer
)%>%
left_join(
df_retailer_set,
by = c("hhid", "periode")
)%>%
left_join(
df_choice_set,
by = c("retailer", "periode")
)%>%
mutate(
choice = (marque_chosen == marque &
label_chosen == label &
calibre_chosen == calibre &
valqvol_chosen == valqvol),
price = ifelse(choice, unit_price, NA)
)%>%
select(-unit_price)
#### SAVING
## FIRST VERSION, WITH NOSALE
saveRDS(consumption_cleaner6, "Inputs/shopping_trips_with_nosale_20211129.rds")
saveRDS(df_choice_set, "Inputs/choice_sets_with_nosale_20211129.rds")
saveRDS(df_retailer_set, "Inputs/retailer_sets_with_nosale_20211129.rds")
saveRDS(df_choice_situation, "Inputs/choice_situations_without_price_with_nosale_20211129.rds")
## SECOND VERSION, WITHOUT NOSALE
saveRDS(consumption_cleaner6%>% filter(marque != "nosale"), "Inputs/shopping_trips_without_nosale_20211129.rds")
saveRDS(df_choice_set%>% filter(marque != "nosale"), "Inputs/choice_sets_without_price_without_nosale_20211129.rds")
saveRDS(df_retailer_set, "Inputs/retailer_sets_with_nosale_20211129.rds")
saveRDS(
df_choice_situation%>% filter(marque != "nosale", marque_chosen != "nosale"),
"Inputs/choice_situations_without_nosale_20211129.rds"
)
end = Sys.time()
print("Duration : ")
print(end-start)
# 2min40
View(consumption_cleaner6)
consumption_cleaner6%>% filter(marque == "LUSTUCRU")
setwd("C:/Users/d.mayaux/Documents/GitHub/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
start = Sys.time()
consumption_without_nosale = readRDS("Inputs/shopping_trips_without_nosale_20211129.rds")
consumption_with_nosale = readRDS("Inputs/shopping_trips_with_nosale_20211129.rds")
hhid_with_enough_period_with_visit = consumption_without_nosale%>%
group_by(hhid, periode)%>%
summarise( nb_visits = n() )%>%
group_by(hhid)%>%
summarise( nb_periode_with_visit = n() )%>%
######### MAIN PARAMETER #############
filter(nb_periode_with_visit >= 6)%>%
######################################
.$hhid%>%
.[order(.)]
missing_hhid_periode =
# Create a table with all the households and all the periods
full_join(
data.frame(hhid = hhid_with_enough_period_with_visit, constant = 1),
data.frame(periode = as.factor(1:13), constant = 1)
)%>%
select(-constant)%>%
# Keep only couple household period for which there is no shopping trip
anti_join(
consumption_without_nosale%>% select(periode, hhid)%>% unique
)
consumption_completed_with_nosale =
# Build the dataframe of nosale to draw from
consumption_with_nosale%>%
filter(marque_simple == "nosale")%>%
semi_join(missing_hhid_periode)%>%
# Pick one nosale per hhid x periode
group_by(hhid, periode)%>%
mutate(
rank = 1:n(),
lottery = sample(1:n(),1)
)%>%
ungroup()%>%
filter(rank == lottery)%>%
select(-rank, -lottery)%>%
# Bind with the original table
bind_rows(
consumption_without_nosale%>%
filter(hhid %in% hhid_with_enough_period_with_visit)
)
# Keep only one observation per period, sales included
X_one_per_period = consumption_completed_with_nosale%>%
group_by(hhid, periode)%>%
mutate(
rank = 1:n(),
lottery = sample(1:n(),1)
)%>%
ungroup()%>%
filter(rank == lottery)%>%
select(-rank, -lottery)%>%
select(X)
saveRDS(X_one_per_period, "Inputs/X_one_per_period_20211129.rds")
consumption_completed_without_nosale = consumption_completed_with_nosale%>% filter(marque_simple != "nosale")
saveRDS(consumption_completed_with_nosale, "Inputs/shopping_trips_with_nosale_for_estimation_20211129.rds")
saveRDS(consumption_completed_without_nosale, "Inputs/shopping_trips_without_nosale_for_estimation_20211129.rds")
product_price = readRDS("Inputs/product_price.rds")
control_residuals_distribution = readRDS("Inputs/control_residuals_distribution.rds")
control_residuals_med_centile_hhid = readRDS("Inputs/control_residuals_med_centile_hhid.rds")
control_first_stage_coefficients = readRDS("Inputs/control_first_stage_coefficients.rds")
choice_situation_without_price_with_nosale_for_estimation =
readRDS("Inputs/choice_situations_without_price_with_nosale_20211129.rds")%>%
filter(X %in% (consumption_completed_with_nosale$X %>% unique()))
choice_situation_with_nosale_for_estimation =
choice_situation_without_price_with_nosale_for_estimation%>%
# Obtain household x retailer x product control function value
left_join(control_residuals_med_centile_hhid)%>%
left_join(
control_residuals_distribution,
by = c("label", "calibre", "marque", "retailer", "med_centile_v" = "centile_nb")
)%>%
# Obtain retailer x product average price and mu_jk
left_join(product_price)%>%
left_join(control_first_stage_coefficients)%>%
mutate(
# DIFFERENT CHOICES CAN BE MADE AT THIS STAGE
control = ifelse(marque_simple == "nosale", 0, 500*centile_value),
#control = ifelse(marque_simple == "nosale", 0, med_centile_nb),
# DIFFERENT CHOICES CAN BE MADE AT THIS STAGE
price = ifelse(marque_simple == "nosale", 0, avg_price),
#price = ifelse(marque_simple == "nosale", 0, ref_price),
#price = ifelse(marque_simple == "nosale", 0, ref_price * mu_value + centile_value)
)%>%
select(-centile_value, -mu_value, -med_centile_v, -avg_price, -ref_price, -ref_price_vol_adjusted)
saveRDS(choice_situation_with_nosale_for_estimation, "Inputs/choice_situation_with_nosale_for_estimation_20211129.rds")
choice_situation_without_nosale_for_estimation =
choice_situation_with_nosale_for_estimation%>%
filter(marque_simple_chosen != "nosale", marque_simple != "nosale")
saveRDS(choice_situation_without_nosale_for_estimation, "Inputs/choice_situation_without_nosale_for_estimation_20211129.rds")
df_product_with_nosale = consumption_completed_with_nosale%>%
select(marque, marque_simple, calibre, label, valqvol, retailer)%>%
unique()%>%
mutate(constant = 1)%>%
group_by(constant)%>%
mutate(product_number = 1:n())%>%
ungroup()%>%
select(-constant)
df_product_without_nosale = consumption_completed_without_nosale%>%
select(marque, marque_simple, calibre, label, valqvol, retailer)%>%
unique()%>%
mutate(constant = 1)%>%
group_by(constant)%>%
mutate(product_number = 1:n())%>%
ungroup()%>%
select(-constant)
saveRDS(df_product_with_nosale, "Inputs/product_with_nosale_20211129.rds")
saveRDS(df_product_without_nosale, "Inputs/product_without_nosale_20211129.rds")
choice_situation_with_nosale_for_apollo = choice_situation_with_nosale_for_estimation%>%
left_join(df_product_with_nosale)%>%
group_by(X)%>%
mutate(
choice = max(choice * product_number)
)%>%
ungroup()%>%
select(
X, hhid, choice,
retailer, marque_simple, label, calibre, valqvol, price, control, product_number
)%>%
mutate_at(vars(X, hhid, choice, valqvol), ~as.integer(as.character(.)))%>%
mutate_at(vars(price, control), as.numeric)%>%
pivot_wider(
id_cols = c("X", "hhid", "choice"),
names_from = "product_number",
values_from = c(
valqvol,
price,
control
),
values_fn = length,
names_glue = "{product_number}_{.value}",
names_sort = TRUE
)
saveRDS(
choice_situation_with_nosale_for_apollo,
"Inputs/choice_situation_with_nosale_for_apollo_20211129.rds"
)
choice_situation_without_nosale_for_apollo = choice_situation_without_nosale_for_estimation%>%
filter(marque_simple != "nosale", marque_simple_chosen != "nosale")%>%
left_join(df_product_without_nosale)%>%
group_by(X)%>%
mutate(
choice = max(choice * product_number)
)%>%
ungroup()%>%
mutate_at(vars(X, hhid, choice, valqvol), as.integer)%>%
mutate_at(vars(price, control), as.numeric)%>%
pivot_wider(
id_cols = c("X", "hhid", "choice"),
names_from = "product_number",
values_from = c(
valqvol,
price,
control
),
names_glue = "{product_number}_{.value}",
names_sort = TRUE
)%>%
mutate(across(ends_with('price'), list(avl = ~as.numeric(!is.na(.))), "{.col}_{.fn}"))
View(choice_situation_with_nosale_for_apollo)
View(df_product_with_nosale)
choice_situation_with_nosale_for_apollo = choice_situation_with_nosale_for_estimation%>%
left_join(df_product_with_nosale)
View(choice_situation_with_nosale_for_apollo)
