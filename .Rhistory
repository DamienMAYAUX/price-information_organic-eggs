)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (initial_organic_price-offset)*scaling - 20,
check_overlap = TRUE,
label = "Initial price"
)+
geom_hline(
yintercept = (organic_price_without_activist-offset)*scaling,
linetype = "dotted"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (organic_price_without_activist-offset)*scaling + 20,
check_overlap = TRUE,
label = "Hypothetical price without activist"
)+
scale_y_continuous(
name = NULL,
breaks = NULL, position = "right",
sec.axis = sec_axis( trans=~./scaling+offset,
name="Average retailer price for organic eggs",
guide = guide_axis(position = "left"))
)+
scale_fill_manual(
name = NULL,
values = c("tomato1", "lightblue"),
breaks = c("activist_demand", "passive_demand"),
labels = c("Activist demand", "Passive demand"),
aesthetics = c("fill")
)+
theme_bw()+
xlab("Boycott price") +
theme(legend.position = "bottom")
scaling = 5000
ggplot(
df_boycott_analysis_label%>%
filter(label == "labelbio")%>%
pivot_longer(
cols = c("activist_demand", "passive_demand"),
names_to = "demand_type"
),
aes(x = boycott_price)
)+
geom_col(aes(y = value, fill = demand_type), position = "stack")+
geom_line(aes(y = (retailer_price-offset)*scaling), size = 1)+
geom_hline(
yintercept = (initial_organic_price-offset)*scaling,
linetype = "longdash"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (initial_organic_price-offset)*scaling - 20,
check_overlap = TRUE,
label = "Initial price"
)+
geom_hline(
yintercept = (organic_price_without_activist-offset)*scaling,
linetype = "dotted"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (organic_price_without_activist-offset)*scaling + 20,
check_overlap = TRUE,
label = "Hypothetical price without activist"
)+
scale_y_continuous(
name = NULL,
breaks = NULL, position = "right",
sec.axis = sec_axis( trans=~./scaling+offset,
name="Average retailer price for organic eggs",
guide = guide_axis(position = "left"))
)+
scale_fill_manual(
name = NULL,
values = c("tomato1", "lightblue"),
breaks = c("activist_demand", "passive_demand"),
labels = c("Activist demand", "Passive demand"),
aesthetics = c("fill")
)+
theme_bw()+
xlab("Boycott price") +
theme(legend.position = "bottom")
scaling = 3000
ggplot(
df_boycott_analysis_label%>%
filter(label == "labelbio")%>%
pivot_longer(
cols = c("activist_demand", "passive_demand"),
names_to = "demand_type"
),
aes(x = boycott_price)
)+
geom_col(aes(y = value, fill = demand_type), position = "stack")+
geom_line(aes(y = (retailer_price-offset)*scaling), size = 1)+
geom_hline(
yintercept = (initial_organic_price-offset)*scaling,
linetype = "longdash"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (initial_organic_price-offset)*scaling - 20,
check_overlap = TRUE,
label = "Initial price"
)+
geom_hline(
yintercept = (organic_price_without_activist-offset)*scaling,
linetype = "dotted"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (organic_price_without_activist-offset)*scaling + 20,
check_overlap = TRUE,
label = "Hypothetical price without activist"
)+
scale_y_continuous(
name = NULL,
breaks = NULL, position = "right",
sec.axis = sec_axis( trans=~./scaling+offset,
name="Average retailer price for organic eggs",
guide = guide_axis(position = "left"))
)+
scale_fill_manual(
name = NULL,
values = c("tomato1", "lightblue"),
breaks = c("activist_demand", "passive_demand"),
labels = c("Activist demand", "Passive demand"),
aesthetics = c("fill")
)+
theme_bw()+
xlab("Boycott price") +
theme(legend.position = "bottom")
# Display parameters
offset = 0.37
scaling = 3000
ggplot(
df_boycott_analysis_label%>%
filter(label == "labelbio")%>%
pivot_longer(
cols = c("activist_demand", "passive_demand"),
names_to = "demand_type"
),
aes(x = boycott_price)
)+
geom_col(aes(y = value, fill = demand_type), position = "stack")+
geom_line(aes(y = (retailer_price-offset)*scaling), size = 1)+
geom_hline(
yintercept = (initial_organic_price-offset)*scaling,
linetype = "longdash"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (initial_organic_price-offset)*scaling - 20,
check_overlap = TRUE,
label = "Initial price"
)+
geom_hline(
yintercept = (organic_price_without_activist-offset)*scaling,
linetype = "dotted"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (organic_price_without_activist-offset)*scaling + 20,
check_overlap = TRUE,
label = "Hypothetical price without activist"
)+
scale_y_continuous(
name = NULL,
breaks = NULL, position = "right",
sec.axis = sec_axis( trans=~./scaling+offset,
name="Average retailer price for organic eggs",
guide = guide_axis(position = "left"))
)+
scale_fill_manual(
name = NULL,
values = c("tomato1", "lightblue"),
breaks = c("activist_demand", "passive_demand"),
labels = c("Activist demand", "Passive demand"),
aesthetics = c("fill")
)+
theme_bw()+
xlab("Boycott price") +
theme(legend.position = "bottom")
scaling = 6000
ggplot(
df_boycott_analysis_label%>%
filter(label == "labelbio")%>%
pivot_longer(
cols = c("activist_demand", "passive_demand"),
names_to = "demand_type"
),
aes(x = boycott_price)
)+
geom_col(aes(y = value, fill = demand_type), position = "stack")+
geom_line(aes(y = (retailer_price-offset)*scaling), size = 1)+
geom_hline(
yintercept = (initial_organic_price-offset)*scaling,
linetype = "longdash"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (initial_organic_price-offset)*scaling - 20,
check_overlap = TRUE,
label = "Initial price"
)+
geom_hline(
yintercept = (organic_price_without_activist-offset)*scaling,
linetype = "dotted"
)+
geom_text(
x = quantile(boycott_price_range, probs = 0.8),
y = (organic_price_without_activist-offset)*scaling + 20,
check_overlap = TRUE,
label = "Hypothetical price without activist"
)+
scale_y_continuous(
name = NULL,
breaks = NULL, position = "right",
sec.axis = sec_axis( trans=~./scaling+offset,
name="Average retailer price for organic eggs",
guide = guide_axis(position = "left"))
)+
scale_fill_manual(
name = NULL,
values = c("tomato1", "lightblue"),
breaks = c("activist_demand", "passive_demand"),
labels = c("Activist demand", "Passive demand"),
aesthetics = c("fill")
)+
theme_bw()+
xlab("Boycott price") +
theme(legend.position = "bottom")
View(df_product)
current_retailer = "43_1"
df_produt_current_retailer = df_product%>%
filter(retailer == current_retailer)%>%
rowid_to_column("rank")
retailer_organic_product_at_boycott_price_rank = df_produt_current_retailer%>%
filter(label == "labelbio")%>%
.$rank
retailer_product_not_at_boycott_price_rank = df_produt_current_retailer%>%
.$rank%>%
.[!(. %in% retailer_organic_product_at_boycott_price_rank)]
retailer_product_not_at_boycott_price_rank
retailer_organic_product_at_boycott_price_rank
retailer_product_rank
retailer_product_rank = df_produt_current_retailer$rank
retailer_product_rank
new_retailer_price = current_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank]
activist_price_list = activist_price_list_test
new_retailer_price = current_retailer_price
current_retailer_price = retailer_price_list_test
new_retailer_price = current_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank]
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, current_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample
)
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, current_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample = NULL
)
demand = demand_and_matrix$demand
cross_product_price_derivative_matrix = demand_and_matrix$matrix
relevant_demand = demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
relevant_cross_product_price_derivative_matrix =
cross_product_price_derivative_matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank]
omega = (belonging_matrix%>% .[retailer_product_not_at_boycott_price_rank]) *
relevant_cross_product_price_derivative_matrix
omega
belonging_matrix
df_product_retailer
omega = (belonging_matrix%>% .[retailer_product_not_at_boycott_price_rank]) *
relevant_cross_product_price_derivative_matrix
omega
retailer_product_not_at_boycott_price_rank
relevant_cross_product_price_derivative_matrix
belonging_matrix%>% .[retailer_product_not_at_boycott_price_rank]
omega = (belonging_matrix%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_not_at_boycott_price_rank]) *
relevant_cross_product_price_derivative_matrix
omega
belonging_matrix%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_not_at_boycott_price_rank]
belonging_matrix =
full_join(
df_product_retailer,
df_product_retailer,
by = c("constant")
)
View(belonging_matrix)
belonging_matrix =
full_join(
df_product_retailer,
df_product_retailer,
by = c("constant")
)%>%
mutate(same_retailer = (retailer.x == retailer.y))%>%
select(-constant, -retailer.x, -retailer.y)%>%
pivot_wider(names_from = product_number.y, values_from = same_retailer)%>%
column_to_rownames("product_number.x")%>%
mutate_all(as.numeric)%>%
as.matrix()
belonging_matrix%>%View()
belonging_matrix =
full_join(
df_product_retailer,
df_product_retailer,
by = c("constant")
)%>%
mutate(same_retailer = (retailer.x == retailer.y))%>%
select(-constant, -retailer.x, -retailer.y)%>%
pivot_wider(names_from = product_number.y, values_from = same_retailer)%>%
column_to_rownames("product_number.x")%>%
mutate_all(as.numeric)%>%
as.matrix()%>%
Matrix(sparse = TRUE)
View(df_product_retailer)
relevant_cross_product_price_derivative_matrix
df_produt_current_retailer = df_product%>%
rowid_to_column("rank")%>%
filter(retailer == current_retailer)
retailer_product_rank = df_produt_current_retailer$rank
retailer_organic_product_at_boycott_price_rank = df_produt_current_retailer%>%
filter(label == "labelbio")%>%
.$rank
retailer_product_not_at_boycott_price_rank = df_produt_current_retailer%>%
.$rank%>%
.[!(. %in% retailer_organic_product_at_boycott_price_rank)]
activist_price_list = activist_price_list_test
current_retailer_price = retailer_price_list_test
new_retailer_price = current_retailer_price
new_retailer_price[retailer_organic_product_at_boycott_price_rank] =
activist_price_list[retailer_organic_product_at_boycott_price_rank]
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, current_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample = NULL
)
demand = demand_and_matrix$demand
cross_product_price_derivative_matrix = demand_and_matrix$matrix
relevant_demand = demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
relevant_cross_product_price_derivative_matrix =
cross_product_price_derivative_matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank, retailer_product_not_at_boycott_price_rank]
omega = (belonging_matrix%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_not_at_boycott_price_rank]) *
relevant_cross_product_price_derivative_matrix
# On rappelle que [1-tau]P = C - Omega^-1 D
# Pour faciler la convergence, moyenne le nouveau vecteur de prix avec le précédent
previous_error = error
omega
error = 1
# On rappelle que [1-tau]P = C - Omega^-1 D
# Pour faciler la convergence, moyenne le nouveau vecteur de prix avec le précédent
previous_error = error
current_step = step
step
current_step
step = 1
# On rappelle que [1-tau]P = C - Omega^-1 D
# Pour faciler la convergence, moyenne le nouveau vecteur de prix avec le précédent
previous_error = error
current_step = step
current_step = current_step/2
new_retailer_price = (1-current_step) * current_retailer_price + current_step * (cost_list - solve(omega, relevant_demand) %>% as.vector())/(1-0.055)
solve(omega, relevant_demand)
relevant_demand = demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
relevant_cross_product_price_derivative_matrix =
cross_product_price_derivative_matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank, retailer_product_rank]
relevant_cost_list = cost_list%>%
.[retailer_product_rank]
omega = (belonging_matrix%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_rank]) *
relevant_cross_product_price_derivative_matrix
omega
solve(omega, relevant_demand)
library(MASS)
omega_pseudo_inverse = ginv(omega)
omega
omega_pseudo_inverse = ginv(omega %>% as.matrix())
omega_pseudo_inverse
omega_pseudo_inverse %*% relevant_demand
omega_pseudo_inverse %*% relevant_demand%>% as.vector()
relevant_cost_list
relevant_cost_list = cost_list%>%
.[retailer_product_rank]
relevant_cost_list
relevant_cost_list - omega_pseudo_inverse %*% relevant_demand%>% as.vector()
# On rappelle que [1-tau]P = C - Omega^-1 D
# Pour faciler la convergence, moyenne le nouveau vecteur de prix avec le précédent
previous_error = error
current_step = step
while (error >= previous_error){
current_step = current_step/2
new_retailer_price = (1-current_step) * current_retailer_price +
current_step * (relevant_cost_list - omega_pseudo_inverse %*% relevant_demand%>% as.vector())/(1-0.055)
error = max(abs(current_retailer_price-new_retailer_price))
}
new_retailer_price[retailer_product_not_at_boycott_price_rank] =
(relevant_cost_list - omega_pseudo_inverse %*% relevant_demand%>% as.vector())/(1-0.055)
retailer_product_not_at_boycott_price_rank
inv(omega_pseudo_inverse %*% omega)
omega_pseudo_inverse %*% omega
omega_pseudo_inverse %*% omega %>% View()
omega_pseudo_inverse %*% omega %>% as.matrix()%>% View()
omega = (belonging_matrix%>% as.matrix()%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_rank]) *
relevant_cross_product_price_derivative_matrix
omega_pseudo_inverse = ginv(omega %>% as.matrix())
inv(omega_pseudo_inverse %*% omega) %*% omega_pseudo_inverse
omega_pseudo_inverse %*% omega
omega_pseudo_inverse
omega = (belonging_matrix%>% as.matrix()%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_rank]) *
relevant_cross_product_price_derivative_matrix
omega_pseudo_inverse = ginv(omega %>% as.matrix())
inv(omega_pseudo_inverse %*% omega) %*% omega_pseudo_inverse
omega
relevant_cross_product_price_derivative_matrix
relevant_cross_product_price_derivative_matrix =
cross_product_price_derivative_matrix%>%
.[relevant_product_number_list, relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank, retailer_product_rank]%>%
as.matrix()
relevant_cost_list = cost_list%>%
.[retailer_product_rank]
omega = (belonging_matrix%>% as.matrix()%>%
.[retailer_product_not_at_boycott_price_rank,retailer_product_rank]) *
relevant_cross_product_price_derivative_matrix
omega
omega_pseudo_inverse = ginv(omega)
inv(omega_pseudo_inverse %*% omega) %*% omega_pseudo_inverse
omega_pseudo_inverse %*% omega
inv(omega_pseudo_inverse %*% omega)
inv(omega %*% omega_pseudo_inverse)
omega
omega %*% omega_pseudo_inverse
inv(omega %*% omega_pseudo_inverse)
omega_pseudo_inverse %*% relevant_demand
relevant_cost_list
relevant_cost_list - omega_pseudo_inverse %*% relevant_demand%>% as.vector()
error = max(abs(
new_retailer_price[retailer_product_not_at_boycott_price_rank] -
current_retailer_price[retailer_product_not_at_boycott_price_rank]
))
error
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, current_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample = NULL
)
demand = demand_and_matrix$demand
cross_product_price_derivative_matrix = demand_and_matrix$matrix
relevant_demand = demand%>%
.[relevant_product_number_list]%>%
.[retailer_product_not_at_boycott_price_rank]
demand_and_matrix = generate_cross_product_derivative_and_demand(
model, current_retailer_price, conditionals,
activist_price_list, hhid_activist_list,
boycott_type, subsample = NULL
)
if (Sys.info()["sysname"] == "Windows"){
dir = "U:/price-information_organic-eggs"
} else {
dir = "~/U/price-information_organic-eggs"
}
setwd(dir)
source("Scripts/0_Packages_Libraries.R")
competition_hypothesis = "perfect_competition"
database = readRDS(paste0("Inputs/database_apollo_12_", competition_hypothesis, ".rds"))
df_choice_set_simplified = readRDS("Inputs/choice_set_simplified.rds")
df_product = readRDS("Inputs/df_product_simplified.rds")%>%
inner_join(
df_choice_set_simplified %>% filter(periode == 12)
)
df_price = readRDS("Inputs/df_price_simplified.rds")
conditionals = readRDS("Inputs/conditionals_simplified_20220131.rds")%>%
select(-post.sd)
retailer_price_list_test = df_price%>%
filter(periode == 12 & marque != "nosale")%>%
left_join(df_product)%>%
group_by(product_number)%>%
summarise(
avg_price = mean(avg_price)
)%>%
.$avg_price
conditionals = readRDS("Inputs/conditionals_simplified_20220131.rds")%>%
select(-post.sd)
if (Sys.info()["sysname"] == "Windows"){
dir = "U:/price-information_organic-eggs"
} else {
dir = "~/U/price-information_organic-eggs"
}
setwd(dir)
source("Scripts/0_Packages_Libraries.R")
