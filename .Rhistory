-estimated_coeff_when_below_p / estimated_coeff_when_below_p[2]
df_test =
data.frame(
price = runif(N+M, min = 2, max = 4),
status = c(rep("passive", N), rep("active", M))
)%>%
mutate(
gumbel_noise = rgumbel(scale = 0.1, n =  N+M),
normal_noise = rnorm(N+M),
purchase = (alpha + beta * price + normal_noise > 0),
purchase_none = ifelse(status == "active", 0, purchase),
purchase_all = ifelse(status == "active", 1, purchase),
purchase_below_p = ifelse(status == "active", price < p_star, purchase)
)
estimated_coeff_when_normal = glm(purchase ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_normal / estimated_coeff_when_normal[2]
estimated_coeff_when_none = glm(purchase_none ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_none / estimated_coeff_when_none[2]
estimated_coeff_when_all = glm(purchase_all ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_all / estimated_coeff_when_all[2]
estimated_coeff_when_below_p = glm(purchase_below_p ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_below_p / estimated_coeff_when_below_p[2]
df_test =
data.frame(
price = runif(N+M, min = 2, max = 4),
status = c(rep("passive", N), rep("active", M))
)%>%
mutate(
gumbel_noise = rgumbel(scale = 0.1, n =  N+M),
normal_noise = rnorm(N+M),
logit_noise = rgumbel(scale = 0.1, n =  N+M) - rgumbel(scale = 0.1, n =  N+M),
purchase = (alpha + beta * price + logit_noise > 0),
purchase_none = ifelse(status == "active", 0, purchase),
purchase_all = ifelse(status == "active", 1, purchase),
purchase_below_p = ifelse(status == "active", price < p_star, purchase)
)
estimated_coeff_when_normal = glm(purchase ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_normal / estimated_coeff_when_normal[2]
estimated_coeff_when_none = glm(purchase_none ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_none / estimated_coeff_when_none[2]
estimated_coeff_when_all = glm(purchase_all ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_all / estimated_coeff_when_all[2]
estimated_coeff_when_below_p = glm(purchase_below_p ~ price, data = df_test, family=binomial(link=logit))$coefficients
-estimated_coeff_when_below_p / estimated_coeff_when_below_p[2]
setwd("C:/Users/d.mayaux/Documents/GitHub/price-information_organic-eggs")
source("Scripts/0_Packages_Libraries.R")
start = Sys.time()
model_name = "nosale_with_control"
model = apollo_loadModel(paste0("Inputs/Apollo/", model_name))
df_product_with_nosale = readRDS("Inputs/product_with_nosale_20211129.rds")%>%
mutate_at(vars(calibre, label, marque_simple), as.character)
df_hhid_retailer = readRDS("Inputs/df_hhid_retailer_set_20211129.rds")
df_price = readRDS("Inputs/product_price_20211129.rds")
df_retailer_price_test = df_price%>%
group_by(label, calibre, marque, retailer, valqvol)%>%
summarize(
avg_price_across_period = mean(avg_price)
)%>%
right_join(
df_product_with_nosale
)%>%
mutate(
avg_price_across_period = ifelse(marque == "nosale", 0, avg_price_across_period)
)%>%
arrange(product_number)%>%
.$avg_price_across_period
choice_situation_with_nosale_for_estimation =
readRDS("Inputs/choice_situation_with_nosale_for_estimation_20211129.rds")
generate_database = function(df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
# df_retailer_price = df_retailer_price_test
choice_situation_with_nosale_for_estimation_with_new_prices = choice_situation_with_nosale_for_estimation%>%
left_join(df_product_with_nosale)%>%
# On remplace l'ancien prix par le nouveau prix
left_join(
data.frame(product_number = 1:nrow(df_product_with_nosale), new_price = df_retailer_price)
)%>%
mutate(price = new_price)%>%
select(-new_price)
# S'il y a boycott, on modifie les prix
if (!is.null(df_activist_price)){
choice_situation_with_nosale_for_estimation_with_new_prices =
choice_situation_with_nosale_for_estimation_with_new_prices%>%
left_join(
data.frame(product_number = 1:nrow(df_product_with_nosale), activist_price = df_activist_price)
)%>%
mutate(
price = ifelse( (price>activist_price) & (hhid%in%hhid_activist_list), NA, price)
)
# Il faudrait faire un test ici
}
choice_situation_with_nosale_for_apollo =
choice_situation_with_nosale_for_estimation_with_new_prices%>%
group_by(X)%>%
mutate(
choice = max(choice * product_number)
)%>%
ungroup()%>%
select(
X, hhid, choice,
retailer, marque_simple, label, calibre, valqvol, price, control, product_number
)%>%
mutate_at(vars(X, hhid, choice, valqvol), ~as.integer(as.character(.)))%>%
mutate_at(vars(price, control), as.numeric)%>%
pivot_wider(
id_cols = c("X", "hhid", "choice"),
names_from = "product_number",
values_from = c(
valqvol,
price,
control
),
names_glue = "{product_number}_{.value}",
names_sort = TRUE
)%>%
mutate(across(ends_with('price'), list(avl = ~as.numeric(!is.na(.))), "{.col}_{.fn}"))%>%
as.data.frame()
rep_nb = as.integer(nrow(choice_situation_with_nosale_for_apollo) / (nrow(df_product_with_nosale) + 1))
res_nb = as.integer(nrow(choice_situation_with_nosale_for_apollo) %% (nrow(df_product_with_nosale) + 1))
database = as.data.frame(choice_situation_with_nosale_for_apollo)%>%
# On rÃ©cupere les caracteristiques du produit
mutate(
marque_simple =
c(
rep(c(df_product_with_nosale$marque_simple, NA_character_), rep_nb),
as.character(df_product_with_nosale$marque_simple)[1:res_nb]
),
label =
c(
rep(c(df_product_with_nosale$label, NA_character_), rep_nb),
df_product_with_nosale$label[1:res_nb]
),
calibre =
c(
rep(c(df_product_with_nosale$calibre, NA_character_), rep_nb),
df_product_with_nosale$calibre[1:res_nb]
)
)%>%
mutate_at(vars(marque_simple, label, calibre), as.factor)
return(database)
}
database <<- generate_database(df_retailer_price)
apollo_beta <<- model$apollo_beta
apollo_fixed <<- model$apollo_fixed
df_retailer_price = df_retailer_price_test
database <<- generate_database(df_retailer_price)
apollo_beta <<- model$apollo_beta
apollo_fixed <<- model$apollo_fixed
apollo_control <<- model$apollo_control
apollo_inputs <<- apollo_validateInputs()
apollo_probabilities <<- model$apollo_probabilities
prediction_settings <<- list()
forecast = apollo_prediction(
model,
apollo_probabilities,
apollo_inputs,
prediction_settings
)
View(forecast)
demand = forecast%>%
select(-ID, observation, chosen)%>%
pivot_longer(
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)
View(forecast)
demand = forecast%>%
select(-ID, Observation, chosen)%>%
pivot_longer(
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)
length(forecast)
demand = forecast%>%
select(-ID, Observation, chosen)%>%
pivot_longer(
cols = 1:(length(forecast)-3),
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)
View(demand)
View(df_product_with_nosale)
demand = forecast%>%
select(-ID, -Observation, -chosen)%>%
pivot_longer(
cols = 1:(length(forecast)-3),
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)
View(demand)
demand = forecast%>%
select(-ID, -Observation, -chosen)%>%
pivot_longer(
cols = 1:(length(forecast)-3),
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)
View(demand)
demand = forecast%>%
select(-ID, -Observation, -chosen)%>%
pivot_longer(
cols = 1:(length(forecast)-3),
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)%>%
mutate(
product_number = as.integer(gsub("alt", "", product_number))
)
View(demand)
demand = forecast%>%
select(-ID, -Observation, -chosen)%>%
pivot_longer(
cols = 1:(length(forecast)-3),
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)%>%
mutate(
product_number = as.integer(gsub("alt", "", product_number))
)%>% arrange(product_number)
View(demand)
demand_function = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
# df_retailer_price = df_retailer_price_test
database <<- generate_database(df_retailer_price)
apollo_beta <<- model$apollo_beta
apollo_fixed <<- model$apollo_fixed
apollo_control <<- model$apollo_control
apollo_inputs <<- apollo_validateInputs()
apollo_probabilities <<- model$apollo_probabilities
prediction_settings <<- list()
forecast = apollo_prediction(
model,
apollo_probabilities,
apollo_inputs,
prediction_settings
)
demand = forecast%>%
select(-ID, -Observation, -chosen)%>%
pivot_longer(
cols = 1:(length(forecast)-3),
names_to = "product_number",
values_to = "probability_sales"
)%>%
group_by(product_number)%>%
summarize(
aggregate_sales = sum(probability_sales)
)%>%
mutate(
product_number = as.integer(gsub("alt", "", product_number))
)%>%
arrange(product_number)%>%
.$aggregate_sales
return(demand)
}
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
# On ne calcule l'elasticite que par rapoprt au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != nosale){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_function(model, df_retailer_price_modified)
}
i = 37
# On ne calcule l'elasticite que par rapoprt au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != nosale){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_function(model, df_retailer_price_modified)
}
# On ne calcule l'elasticite que par rapoprt au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_function(model, df_retailer_price_modified)
}
df_product_with_nosale[i,"marque"] != "nosale"
i = 38
df_product_with_nosale[i,"marque"] != "nosale"
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_function(model, df_retailer_price_modified)
demand = demand_function(model, df_retailer_price)
(demand_modified-demand)/demand
demand_modified = demand_function(model, df_retailer_price_modified)
demand = demand_function(model, df_retailer_price)
(demand_modified-demand)/demand
i = 12
df_product_with_nosale[i,"marque"] != "nosale"
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.05
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
(demand_modified-demand)/demand
100 * (demand_modified-demand)/demand
omega_simulation[,i] = 100*(demand_modified-demand)/demand
simulating_omega = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
demand = demand_function(model, df_retailer_price)
# On itere selon le prix que l'on fait changer
# Cela revient Ã  remplir colonne par colonne la matrice
for (i in 1:product_nb){
# i = 12
# On ne calcule l'elasticite que par rapport au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
omega_simulation[,i] = 100*(demand_modified-demand)/demand
}
}
}
omage = simulating_omega(model, df_retailer_price_test)
simulating_omega = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
omega_simulation_start = Sys.time()
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
demand = demand_function(model, df_retailer_price)
# On itere selon le prix que l'on fait changer
# Cela revient Ã  remplir colonne par colonne la matrice
for (i in 1:product_nb){
# i = 12
# On ne calcule l'elasticite que par rapport au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
omega_simulation[,i] = 100*(demand_modified-demand)/demand
}
}
omega_simulation_end = Sys.time()
print("Omega simulation time : ", omega_simulation_end - omega_simulation_start)
}
omega_simulation_start = Sys.time()
omega_simulation_end = Sys.time()
print("Omega simulation time : ", omega_simulation_end - omega_simulation_start)
print(paste("Omega simulation time :", omega_simulation_end - omega_simulation_start))
simulating_omega = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
omega_simulation_start = Sys.time()
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
demand = demand_function(model, df_retailer_price)
# On itere selon le prix que l'on fait changer
# Cela revient Ã  remplir colonne par colonne la matrice
for (i in 1:product_nb){
# i = 12
# On ne calcule l'elasticite que par rapport au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
omega_simulation[,i] = 100*(demand_modified-demand)/demand
}
}
omega_simulation_end = Sys.time()
print(paste("Omega simulation time :", omega_simulation_end - omega_simulation_start))
}
omega = simulating_omega(model, df_retailer_price_test)
simulating_omega = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
omega_simulation_start = Sys.time()
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
demand = demand_function(model, df_retailer_price)
# On itere selon le prix que l'on fait changer
# Cela revient Ã  remplir colonne par colonne la matrice
for (i in 290:product_nb){
# i = 12
# On ne calcule l'elasticite que par rapport au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
omega_simulation[,i] = 100*(demand_modified-demand)/demand
}
}
omega_simulation_end = Sys.time()
print(paste("Omega simulation time :", omega_simulation_end - omega_simulation_start))
return(omega_simulation)
}
omega = simulating_omega(model, df_retailer_price_test)
View(omega)
simulating_omega = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
omega_simulation_start = Sys.time()
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
demand = demand_function(model, df_retailer_price)
# On itere selon le prix que l'on fait changer
# Cela revient Ã  remplir colonne par colonne la matrice
for (i in 290:product_nb){
# i = 12
# On ne calcule l'elasticite que par rapport au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
omega_simulation[,i] = 100*(demand_modified-demand)/demand
}
}
omega_simulation_end = Sys.time()
print("Omega simulation time :")
print(omega_simulation_end - omega_simulation_start)
return(omega_simulation)
}
omega = simulating_omega(model, df_retailer_price_test)
simulating_omega = function(model, df_retailer_price, df_activist_price = NULL, hhid_activist_list = NULL){
omega_simulation_start = Sys.time()
product_nb = nrow(df_product_with_nosale)
omega_simulation = matrix(data = 0, nrow = product_nb, ncol = product_nb)
demand = demand_function(model, df_retailer_price)
# On itere selon le prix que l'on fait changer
# Cela revient Ã  remplir colonne par colonne la matrice
for (i in 1:product_nb){
# i = 12
# On ne calcule l'elasticite que par rapport au changement de prix d'un vrai produit
if (df_product_with_nosale[i,"marque"] != "nosale"){
df_retailer_price_modified = df_retailer_price
df_retailer_price_modified[i] = df_retailer_price[i] * 1.01
demand_modified = demand_function(model, df_retailer_price_modified)
omega_simulation[,i] = 100*(demand_modified-demand)/demand
}
}
omega_simulation_end = Sys.time()
print("Omega simulation time :")
print(omega_simulation_end - omega_simulation_start)
return(omega_simulation)
}
omega = simulating_omega(model, df_retailer_price_test)
cross_product_elasticity_matrix_test = omega
cross_product_elasticity_matrix = omega
View(cross_product_elasticity_matrix)
relevant_product_nb = df_product_with_nosale%>%
filter(marque != "nosale")%>%
.$product_nb
relevant_product_numbers = df_product_with_nosale%>%
filter(marque != "nosale")%>%
.$product_number
relevant_retailer_price = df_retailer_price[relevant_product_nb]
relevant_demand = demand_function(model, df_retailer_price)%>%
.[relevant_retailer_price]
relevant_demand = demand_function(model, df_retailer_price)%>%
.[relevant_product_numbers]
relevant_cross_product_elasticity_matrix =
cross_product_elasticity_matrix[relevant_product_nb, relevant_product_nb]
relevant_retailer_price = df_retailer_price[relevant_product_numbers]
relevant_product_number_list = df_product_with_nosale%>%
filter(marque != "nosale")%>%
.$product_number
relevant_retailer_price = df_retailer_price[relevant_product_number_list]
relevant_demand = demand_function(model, df_retailer_price)%>%
.[relevant_product_number_list]
relevant_cross_product_elasticity_matrix =
cross_product_elasticity_matrix[relevant_product_number_list, relevant_product_number_list]
df_retailer_choice_set = readRDS("Inputs/df_hhid_retailer_set_20211129.rds")
df_retailer_set = readRDS("Inputs/retailer_sets_with_nosale_20211129.rds")
View(df_retailer_set)
df_retailer_set = readRDS("Inputs/retailer_sets_with_nosale_20211129.rds")
View(df_retailer_set)
# On construit la matrice d'appartenance
df_product_with_nosale%>%
filter(marque!= "nosale")
relevant_product_number_list = df_product_with_nosale%>%
filter(marque != "nosale")%>%
arrange(retailer)%>%
.$product_number
relevant_product_number_list = df_product_with_nosale%>%
filter(marque != "nosale")%>%
arrange(retailer)%>%
.$product_number
relevant_retailer_price = df_retailer_price[relevant_product_number_list]
relevant_demand = demand_function(model, df_retailer_price)%>%
.[relevant_product_number_list]
# On construit la matrice d'appartenance
relevant_cross_product_elasticity_matrix =
cross_product_elasticity_matrix[relevant_product_number_list, relevant_product_number_list]
# On inverse ! C = P + Omega^-1 D
df_cost = df_retailer_price + inv(omega) ** (relevant_demand)
library(matlib)
install.packages(matlib)
install.packages("matlib")
library(matlib)
# On inverse ! C = P + Omega^-1 D
df_cost = df_retailer_price + inv(omega) ** (relevant_demand)
# On inverse ! C = P + Omega^-1 D
df_cost = df_retailer_price + Solve(omega, relevant_demand)
# On inverse ! C = P + Omega^-1 D
df_cost = df_retailer_price + Solve(relevant_cross_product_elasticity_matrix, relevant_demand)
